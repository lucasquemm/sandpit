{"mappings":"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","sources":["src/elements/empty.js","src/random.js","src/element.js","src/elements/wood.js","src/elements/smoke.js","src/elements/fire.js","src/elements/water.js","src/elements/sand.js","src/sandpit.js","src/canvas.js","src/elements/stone.js","src/main.js"],"sourcesContent":["const EMPTY = 'EMPTY'\nconst empty = () => ({ type: EMPTY, clock: 0 })\n\nexport { EMPTY, empty }\n","const rand = (max, min = 0) => Math.random() * (max - min) + min\nconst randInt = (...args) => Math.round(rand(...args))\nconst pickRand = (values) => values[randInt(values.length - 1, 0)]\nconst chance = (threshold) => Math.random() < threshold\n\nexport { rand, randInt, pickRand, chance }\n","import { randInt } from './random'\n\nconst make = ({ type, color, ...meta }) => ({\n  type,\n  clock: 0,\n  colorInput: color,\n  color: createColor(color),\n  ...meta,\n})\n\nconst createColor = (color) =>\n  `hsl(${color[0]}deg ${color[1]}% ${randInt(color[2], color[3])}%)`\n\nconst updateColor = (cell) => {\n  cell.color = createColor(cell.colorInput)\n}\n\nexport { make, updateColor }\n","import * as element from '../element'\n\nconst NAME = 'WOOD'\n\nconst make = () => element.make({ type: NAME, color: [33, 41, 30, 15] })\n\nexport { NAME, make }\n","import * as water from './water'\nimport { EMPTY, empty } from './empty'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst NAME = 'SMOKE'\nconst despawnChance = 0.015\nconst chanceOfGoingStraight = 0.95\nconst chanceOfSpread = 0.5\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    direction: pickRand([1, -1]),\n    color: [4, 2, 79, 90],\n  })\n\nconst update = (sandpit, cell) => {\n  const above = sandpit.get(0, -1)\n\n  if (chance(despawnChance)) {\n    sandpit.set(0, 0, empty())\n  }\n\n  switch (above.type) {\n    case EMPTY:\n      if (chance(chanceOfGoingStraight)) {\n        sandpit.move(0, -1)\n      } else if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, -1)\n      }\n      break\n    case water.NAME:\n      sandpit.move(0, -1)\n      break\n  }\n\n  if (chance(chanceOfSpread) && sandpit.is(cell.direction, 0, EMPTY)) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n}\n\nexport { NAME, make, update }\n","import { EMPTY, empty } from './empty'\nimport * as wood from './wood'\nimport * as smoke from './smoke'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst NAME = 'FIRE'\nconst despawnChance = 0.2\nconst chanceOfGoingStraight = 0.73\nconst chanceOfSpread = 0.75\nconst ignitingChance = 1\nconst burningChance = 0.01\n\nconst extinguishChance = 0.01\nconst looseFlameChance = 0.06\n\nconst orange1 = [35, 76, 62, 72]\nconst orange2 = [35, 79, 67, 77]\nconst red1 = [7, 82, 56, 66]\nconst red2 = [7, 82, 49, 59]\nconst red3 = [7, 87, 33, 43]\n\nconst make = (phase = 'spark') =>\n  element.make({\n    type: NAME,\n    phase,\n    direction: pickRand([1, -1]),\n    color: pickRand([orange1, orange2, red1, red2, red3]),\n  })\n\nconst ignite = (sandpit) => {\n  let igniteTarget\n\n  for (let [nx, ny] of sandpit.neighbors(1)) {\n    if (chance(ignitingChance) && sandpit.is(nx, ny, wood.NAME)) {\n      igniteTarget = [nx, ny]\n      break\n    }\n  }\n\n  if (igniteTarget) {\n    sandpit.set(...igniteTarget, make('blaze'))\n    sandpit.set(0, 0, empty())\n  }\n}\n\nconst burn = (sandpit, spreadChance) => {\n  let burnTarget\n\n  for (let [nx, ny] of sandpit.neighbors(2)) {\n    if (chance(spreadChance) && sandpit.is(nx, ny, wood.NAME)) {\n      burnTarget = [nx, ny]\n      break\n    }\n  }\n  if (burnTarget) sandpit.set(...burnTarget, make('blaze'))\n}\n\nconst update = (sandpit, cell) => {\n  switch (cell.phase) {\n    case 'spark':\n      if (chance(despawnChance)) {\n        sandpit.set(0, 0, empty())\n      }\n\n      if (chance(chanceOfGoingStraight) && sandpit.is(0, -1, EMPTY)) {\n        sandpit.move(0, -1)\n      } else if (sandpit.is(cell.direction, -1, EMPTY)) {\n        sandpit.move(cell.direction, -1)\n      }\n\n      if (chance(chanceOfSpread) && sandpit.is(cell.direction, 0, EMPTY)) {\n        sandpit.move(cell.direction, 0)\n      } else {\n        cell.direction *= -1\n      }\n\n      ignite(sandpit)\n      break\n    case 'blaze':\n      burn(sandpit, burningChance)\n\n      if (chance(extinguishChance)) {\n        sandpit.set(0, 0, smoke.make())\n        return\n      } else if (sandpit.is(0, -1, EMPTY)) {\n        if (chance(looseFlameChance)) {\n          sandpit.set(0, -1, make())\n        } else if (chance(0.15)) {\n          sandpit.set(0, -1, smoke.make())\n        }\n      }\n\n      let noNeighbors = true\n\n      for (let [nx, ny] of sandpit.neighbors(1)) {\n        if (!sandpit.is(nx, ny, EMPTY)) {\n          noNeighbors = false\n          break\n        }\n      }\n      if (noNeighbors) {\n        sandpit.set(0, 0, empty())\n      }\n      break\n  }\n}\n\nexport { NAME, make, update }\n","import { EMPTY } from './empty'\nimport * as element from '../element'\nimport * as fire from './fire'\nimport { chance, pickRand } from '../random'\n\nconst NAME = 'WATER'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    direction: pickRand([1, -1]),\n    color: [216, 65, 60, 50],\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n\n  switch (below.type) {\n    case fire.NAME:\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, 1)\n      }\n      break\n  }\n\n  if (\n    sandpit.is(cell.direction, 0, EMPTY) ||\n    sandpit.is(cell.direction, 0, fire.NAME)\n  ) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n\n  if (chance(0.005)) {\n    element.updateColor(cell)\n  }\n}\n\nexport { NAME, make, update }\n","import { EMPTY } from './empty'\nimport * as water from './water'\nimport * as element from '../element'\nimport { pickRand } from '../random'\n\nconst NAME = 'SAND'\n\nconst make = () => element.make({ type: NAME, color: [46, 78, 75, 50] })\n\nconst update = (sandpit) => {\n  const below = sandpit.get(0, 1)\n  const direction = pickRand([1, -1])\n\n  switch (below.type) {\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case water.NAME:\n      sandpit.swap(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(direction, 1, EMPTY)) {\n        sandpit.move(direction, 1)\n      }\n      break\n  }\n}\n\nexport { NAME, make, update }\n","import * as sand from './elements/sand'\nimport { empty, EMPTY } from './elements/empty'\nimport * as water from './elements/water'\nimport * as smoke from './elements/smoke'\nimport * as fire from './elements/fire'\n\nlet cells = []\nlet size = 0\nlet generation\nlet upperBound\nlet defaultUpperBound\nlet activeCells\n\nconst init = (newSize = 100) => {\n  generation = 1\n  boundingY = newSize\n  defaultUpperBound = { x: 0, y: newSize }\n  upperBound = defaultUpperBound\n  size = newSize\n  cells = Array.from({ length: size * size }, () => empty())\n}\nconst get = (x, y) => {\n  if (x < 0 || y < 0 || x >= size || y >= size) return { type: 'BOUNDS' }\n\n  return cells[getIndex(x, y)]\n}\n\nconst set = (x, y, cell = empty()) => {\n  const index = getIndex(x, y)\n\n  cell.clock = generation + 1\n  cells[index] = cell\n\n  if (y < upperBound.y) upperBound = { x, y }\n}\n\nconst neighbors = (range = 1) => {\n  return Array.from({ length: range }, (_, i) => {\n    const n = i + 1\n    return [\n      [n * -1, n * -1],\n      [n * -1, 0],\n      [n * -1, n * 1],\n      [0, n * -1],\n      [0, n * 1],\n      [n * 1, n * -1],\n      [n * 1, 0],\n      [n * 1, n * 1],\n    ]\n  }).flat()\n}\n\nconst createApi = (cx, cy) => {\n  const relativeGet = (dx, dy) => get(cx + dx, cy + dy)\n  const relativeSet = (dx, dy, cell) => set(cx + dx, cy + dy, cell)\n\n  const is = (dx, dy, type) => get(cx + dx, cy + dy).type === type\n\n  const move = (dx, dy) => {\n    const cell = get(cx, cy)\n\n    if (cell.clock > generation) return\n\n    set(cx + dx, cy + dy, cell)\n    set(cx, cy, empty())\n  }\n\n  const swap = (dx, dy) => {\n    const c0 = get(cx, cy)\n\n    if (c0.clock > generation) return\n\n    const x = cx + dx\n    const y = cy + dy\n    const c1 = get(x, y)\n\n    set(x, y, c0)\n    set(cx, cy, c1)\n  }\n\n  return { is, move, swap, set: relativeSet, get: relativeGet, neighbors }\n}\n\nconst self = createApi(0, 0)\n\nconst getIndex = (x, y) => x * size + y\n\nconst getCoords = (index) => {\n  const y = index % size\n  const x = (index - y) / size\n\n  return [x, y]\n}\n\nconst draw = (x, y, cell) => {\n  if (cell.type === EMPTY || self.is(x, y, EMPTY)) {\n    const index = getIndex(x, y)\n    cell.clock = generation\n    cells[index] = cell\n    if (y < upperBound.y) upperBound = { x, y }\n  }\n}\n\nconst update = () => {\n  activeCells = {}\n\n  for (let i = 0, l = cells.length; i < l; i++) {\n    const [x, y] = getCoords(i)\n    const cell = cells[i]\n\n    if (cell.type !== EMPTY) {\n      if (cell.color in activeCells) {\n        activeCells[cell.color].push({ x, y, cell })\n      } else {\n        activeCells[cell.color] = [{ x, y, cell }]\n      }\n    }\n\n    const api = createApi(x, y)\n\n    switch (cell.type) {\n      case sand.NAME:\n        sand.update(api, cell)\n        break\n      case water.NAME:\n        water.update(api, cell)\n        break\n      case smoke.NAME:\n        smoke.update(api, cell)\n        break\n      case fire.NAME:\n        fire.update(api, cell)\n        break\n    }\n  }\n  generation++\n}\n\nconst getUpperBound = () => upperBound.y\n\nconst refreshUpperBound = () => {\n  if (self.is(upperBound.x, upperBound.y, EMPTY)) {\n    upperBound = defaultUpperBound\n  }\n}\n\nconst getActive = () => activeCells\n\nexport {\n  init,\n  getUpperBound,\n  refreshUpperBound,\n  draw,\n  update,\n  getActive,\n  neighbors,\n}\n","const width = 500\nconst height = 500\nconst cellSize = 5\nconst canvas = document.querySelector('canvas')\nconst ctx = canvas.getContext('2d', { alpha: false })\nconst dpr = window.devicePixelRatio || 1\nconst boundsOffset = 5\n\ncanvas.width = width * dpr\ncanvas.height = height * dpr\ncanvas.style.width = `${width}px`\ncanvas.style.height = `${height}px`\nctx.scale(dpr, dpr)\nctx.fillStyle = 'white'\nctx.fillRect(0, 0, width, height)\n\nconst draw = (world) => {\n  const boundingY = world.getUpperBound() * cellSize - boundsOffset\n\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, boundingY, width, height - boundingY)\n\n  if (window.DEBUG) {\n    ctx.fillStyle = 'red'\n    ctx.fillRect(0, boundingY, width, 1)\n  }\n\n  const activeCells = world.getActive()\n\n  for (let color in activeCells) {\n    ctx.fillStyle = color\n    const blocks = activeCells[color]\n\n    for (let { x, y } of blocks) {\n      ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize)\n    }\n  }\n\n  world.refreshUpperBound()\n}\n\nexport { draw, cellSize }\n","import * as element from '../element'\n\nconst NAME = 'STONE'\n\nconst make = () => element.make({ type: NAME, color: [0, 0, 60, 40] })\n\nexport { NAME, make }\n","import * as sandpit from './sandpit'\nimport * as canvas from './canvas'\nimport * as sand from './elements/sand'\nimport * as stone from './elements/stone'\nimport { empty } from './elements/empty'\nimport * as water from './elements/water'\nimport * as smoke from './elements/smoke'\nimport * as wood from './elements/wood'\nimport * as fire from './elements/fire'\n\nwindow.DEBUG = false\nconst MAX_FPS = 60\nlet now, elapsed, then, fpsInterval\n\nconst tick = () => {\n  sandpit.update()\n  canvas.draw(sandpit)\n}\n\nconst loop = () => {\n  requestAnimationFrame(loop)\n  now = Date.now()\n  elapsed = now - then\n\n  if (elapsed > fpsInterval) {\n    then = now - (elapsed % fpsInterval)\n    tick()\n  }\n}\n\nconst start = () => {\n  fpsInterval = 1000 / MAX_FPS\n  then = Date.now()\n\n  loop()\n}\n\nconst $canvas = document.querySelector('#canvas')\n\nlet drawing = false\n\nconst coord = (c) => Math.floor(c / canvas.cellSize)\n\nconst getCoords = (e) => {\n  const x = coord(e.x)\n  const y = coord(e.y)\n\n  return [\n    [x, y],\n    [x + 1, y],\n    [x - 1, y],\n    [x, y + 1],\n    [x, y - 1],\n  ]\n}\n\nconst handleDrawing = (e) => {\n  getCoords(e).forEach((coords) => sandpit.draw(...coords, useElement()))\n}\n\n$canvas.addEventListener('mousemove', (e) => {\n  if (drawing) handleDrawing(e)\n})\n$canvas.addEventListener('click', handleDrawing)\n$canvas.addEventListener('mousedown', () => {\n  drawing = true\n})\n$canvas.addEventListener('mouseup', () => {\n  drawing = false\n})\n\nlet selectedElement = 'sand'\n\nconst stoneBtn = document.querySelector('#pedra-btn')\nconst sandBtn = document.querySelector('#areia-btn')\nconst emptyBtn = document.querySelector('#ar-btn')\nconst waterBtn = document.querySelector('#water-btn')\nconst smokeBtn = document.querySelector('#smoke-btn')\nconst woodBtn = document.querySelector('#wood-btn')\nconst fireBtn = document.querySelector('#fire-btn')\n\nconst elements = {\n  sand,\n  stone,\n  empty: { make: empty },\n  water,\n  smoke,\n  wood,\n  fire,\n}\n\nconst useElement = () => elements[selectedElement].make()\n\nstoneBtn.addEventListener('click', () => {\n  return (selectedElement = 'stone')\n})\n\nsandBtn.addEventListener('click', () => {\n  return (selectedElement = 'sand')\n})\n\nemptyBtn.addEventListener('click', () => {\n  return (selectedElement = 'empty')\n})\n\nwaterBtn.addEventListener('click', () => {\n  return (selectedElement = 'water')\n})\n\nsmokeBtn.addEventListener('click', () => {\n  return (selectedElement = 'smoke')\n})\n\nwoodBtn.addEventListener('click', () => {\n  return (selectedElement = 'wood')\n})\n\nfireBtn.addEventListener('click', () => {\n  return (selectedElement = 'fire')\n})\n\ndocument.querySelector('#tick').addEventListener('click', tick)\n\nsandpit.init()\n\nif (!window.DEBUG) {\n  start()\n}\n"],"names":["$1460f5c4b71b7c68$export$bc9d46f8a6dad03f","type","clock","$3a032b790485add5$export$8248f9132673e015","args","Math","round","max","min","random","$3a032b790485add5$export$4cdab98efea3e8b2","$3a032b790485add5$export$a5f66370410fab64","values","length","$3a032b790485add5$export$80f8b9c27b5dc2b2","threshold","$3ff9a9a3b6092d14$export$bf41f33ed18406c8","color","meta","colorInput","$3ff9a9a3b6092d14$var$createColor","$c8ebb0102dacb43d$export$93fca7f496b43a5f","$c8ebb0102dacb43d$export$bf41f33ed18406c8","$474d74fcb62beccd$export$93fca7f496b43a5f","$474d74fcb62beccd$export$bf41f33ed18406c8","direction","$474d74fcb62beccd$export$6854927f027804e4","sandpit","cell","above","get","set","move","is","$e4a4aeb00bd59c81$export$93fca7f496b43a5f","$25b0da8596a9b88a$export$93fca7f496b43a5f","$25b0da8596a9b88a$var$orange1","$25b0da8596a9b88a$var$orange2","$25b0da8596a9b88a$var$red1","$25b0da8596a9b88a$var$red2","$25b0da8596a9b88a$var$red3","$25b0da8596a9b88a$export$bf41f33ed18406c8","phase","$25b0da8596a9b88a$export$6854927f027804e4","igniteTarget","nx","ny","neighbors","$25b0da8596a9b88a$var$ignite","spreadChance","burnTarget","$25b0da8596a9b88a$var$burn","noNeighbors","$e4a4aeb00bd59c81$export$bf41f33ed18406c8","$e4a4aeb00bd59c81$export$6854927f027804e4","$3ff9a9a3b6092d14$export$bacc46db4435ba45","$65c2d75c41e187d5$export$93fca7f496b43a5f","$65c2d75c41e187d5$export$bf41f33ed18406c8","$65c2d75c41e187d5$export$6854927f027804e4","below","swap","$e1cd449f27ef3d0e$var$generation","$e1cd449f27ef3d0e$var$upperBound","$e1cd449f27ef3d0e$var$defaultUpperBound","$e1cd449f27ef3d0e$var$activeCells","$e1cd449f27ef3d0e$var$cells","$e1cd449f27ef3d0e$var$size","$e1cd449f27ef3d0e$export$8e9f59652b1cad73","newSize","boundingY","x","y","Array","from","$e1cd449f27ef3d0e$var$get","$e1cd449f27ef3d0e$var$getIndex","$e1cd449f27ef3d0e$var$set","index","$e1cd449f27ef3d0e$export$1bf6aec5ccd78699","range","_","i","n","flat","$e1cd449f27ef3d0e$var$createApi","cx","cy","dx","dy","c0","c1","$e1cd449f27ef3d0e$var$self","$e1cd449f27ef3d0e$var$getCoords","$e1cd449f27ef3d0e$export$7cbbc9db17e8ab1b","$e1cd449f27ef3d0e$export$6854927f027804e4","l","push","api","$e1cd449f27ef3d0e$export$7fd58492dd0d1e64","$e1cd449f27ef3d0e$export$66f1f77d419e5f9a","$e1cd449f27ef3d0e$export$5ccc10bf06e37b76","$5065ffdfbfb3c90c$var$canvas","document","querySelector","$5065ffdfbfb3c90c$var$ctx","getContext","alpha","$5065ffdfbfb3c90c$var$dpr","window","devicePixelRatio","width","height","style","scale","fillStyle","fillRect","$4a3193ef63973c15$export$93fca7f496b43a5f","$4a3193ef63973c15$export$bf41f33ed18406c8","DEBUG","$379cc73f66e6620c$var$now","$379cc73f66e6620c$var$elapsed","$379cc73f66e6620c$var$then","$379cc73f66e6620c$var$fpsInterval","$379cc73f66e6620c$var$tick","$e1cd449f27ef3d0e$exports","update","world","getUpperBound","activeCells","getActive","blocks","refreshUpperBound","$5065ffdfbfb3c90c$export$7cbbc9db17e8ab1b","$379cc73f66e6620c$var$loop","requestAnimationFrame","Date","now","$379cc73f66e6620c$var$$canvas","$379cc73f66e6620c$var$drawing","$379cc73f66e6620c$var$coord","c","floor","$379cc73f66e6620c$var$handleDrawing","e","$379cc73f66e6620c$var$getCoords","forEach","coords","draw","$379cc73f66e6620c$var$useElement","addEventListener","$379cc73f66e6620c$var$selectedElement","$379cc73f66e6620c$var$stoneBtn","$379cc73f66e6620c$var$sandBtn","$379cc73f66e6620c$var$emptyBtn","$379cc73f66e6620c$var$waterBtn","$379cc73f66e6620c$var$smokeBtn","$379cc73f66e6620c$var$woodBtn","$379cc73f66e6620c$var$fireBtn","$379cc73f66e6620c$var$elements","$65c2d75c41e187d5$exports","$4a3193ef63973c15$exports","empty","make","$e4a4aeb00bd59c81$exports","$474d74fcb62beccd$exports","$c8ebb0102dacb43d$exports","$25b0da8596a9b88a$exports","init"],"version":3,"file":"index.e00c041f.js.map"}