{"version":3,"sources":["elements/empty.js","random.js","element.js","elements/wood.js","elements/smoke.js","elements/oil.js","elements/plant.js","elements/fire.js","elements/water.js","elements/sand.js","elements/stone.js","elements/slime.js","elements/lava.js","elements/index.js","sandpit.js","canvas.js","main.js"],"names":["EMPTY","NAME","empty_","type","clock","empty","make","rand","max","min","Math","random","randInt","round","pickRand","values","length","chance","threshold","color","meta","colorInput","createColor","setColor","cell","refreshColor","BASE_COLOR","element","flammable","despawnChance","chanceOfGoingStraight","chanceOfSpread","direction","update","sandpit","above","get","set","move","is","water","below","fire","swap","energy","isStem","kind","undefined","dx","dy","canGrow","neighbors1","nx","ny","ignitingChance","burningChance","extinguishChance","looseFlameChance","orange1","orange2","red1","red2","red3","phase","ignite","igniteTarget","wood","oil","plant","burn","spreadChance","burnTarget","neighbors2","smoke","noNeighbors","slimey","drip","neighborCount","n","nbr","unstuck","stone","activeElements","sand","slime","lava","generation","upperBound","defaultUpperBound","cells","size","activeCells","BOUNDS","init","newSize","x","y","Array","from","getIndex","index","makeNeighbors","range","_","i","flat","createApi","cx","cy","c0","c1","coordsCache","self","getCoords","cache","draw","l","cellsForColor","push","getUpperBound","refreshUpperBound","getActive","getCirularNeighbors","r","center","xSym","ySym","width","height","cellSize","ctx","boundsOffset","canvas","document","createElement","getContext","alpha","dpr","window","devicePixelRatio","style","querySelector","prepend","scale","fillStyle","fillRect","world","boundingY","DEBUG","blocks","now","elapsed","then","fpsInterval","previousElementBtn","MAX_FPS","tick","loop","requestAnimationFrame","Date","start","selectedElement","elements","elementsGrid","Object","forEach","btn","h","s","classList","add","textContent","toLowerCase","background","addEventListener","remove","appendChild","previousSize","toolSizes","toolsGrid","selectedSize","tool","resetBtn","location","reload","tickBtn","$canvas","canvasBounds","getBoundingClientRect","drawing","coord","c","floor","e","handleDrawing","coords"],"mappings":"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","file":"main.ade20646.js","sourceRoot":"../src","sourcesContent":["const EMPTY = 'EMPTY'\nconst NAME = EMPTY\nconst empty_ = { type: EMPTY, clock: 0 }\nconst empty = () => empty_\nconst make = empty\n\nexport { EMPTY, empty, make, NAME }\n","const rand = (max, min = 0) => Math.random() * (max - min) + min\nconst randInt = (...args) => Math.round(rand(...args))\nconst pickRand = (values) => values[randInt(values.length - 1, 0)]\nconst chance = (threshold) => Math.random() < threshold\n\nexport { rand, randInt, pickRand, chance }\n","import { randInt } from './random'\n\nconst make = ({ type, color, ...meta }) => ({\n  type,\n  clock: 0,\n  colorInput: color,\n  color: createColor(color),\n  ...meta,\n})\n\nconst createColor = (color) =>\n  `hsl(${color[0]}deg ${color[1]}% ${randInt(color[2], color[3])}%)`\n\nconst setColor = (color, cell) => {\n  cell.color = createColor(color)\n}\n\nconst refreshColor = (cell) => {\n  cell.color = createColor(cell.colorInput)\n}\n\nexport { make, refreshColor, setColor }\n","import * as element from '../element'\n\nconst BASE_COLOR = [33, 41, 30, 15]\n\nconst NAME = 'WOOD'\n\nconst make = () =>\n  element.make({ type: NAME, flammable: true, color: BASE_COLOR })\n\nexport { NAME, make, BASE_COLOR }\n","import * as water from './water'\nimport { EMPTY, empty } from './empty'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [4, 2, 79, 90]\n\nconst NAME = 'SMOKE'\nconst despawnChance = 0.015\nconst chanceOfGoingStraight = 0.95\nconst chanceOfSpread = 0.5\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const above = sandpit.get(0, -1)\n\n  if (chance(despawnChance)) {\n    sandpit.set(0, 0, empty())\n  }\n\n  switch (above.type) {\n    case EMPTY:\n      if (chance(chanceOfGoingStraight)) {\n        sandpit.move(0, -1)\n      } else if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, -1)\n      }\n      break\n    case water.NAME:\n      sandpit.move(0, -1)\n      break\n  }\n\n  if (chance(chanceOfSpread) && sandpit.is(cell.direction, 0, EMPTY)) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as element from '../element'\nimport * as fire from './fire'\nimport * as water from './water'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [25, 59, 41, 48]\n\nconst NAME = 'OIL'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    flammable: true,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n\n  switch (below.type) {\n    case fire.NAME:\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, 1)\n      }\n      break\n    case water.NAME:\n      if (sandpit.is(cell.direction, -1, water.NAME)) {\n        sandpit.swap(cell.direction, -1)\n      }\n      break\n  }\n\n  if (sandpit.is(cell.direction, 0, EMPTY)) {\n    sandpit.move(cell.direction, 0)\n  } else if (chance(0.5) && sandpit.is(cell.direction, 0, water.NAME)) {\n    sandpit.swap(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n\n  if (chance(0.005)) {\n    element.refreshColor(cell)\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { empty, EMPTY } from './empty'\nimport * as water from './water'\nimport * as element from '../element'\nimport { chance, pickRand, randInt } from '../random'\n\nconst BASE_COLOR = [122, 73, 36, 30]\n\nconst NAME = 'PLANT'\n\nconst make = (energy, color = BASE_COLOR) => {\n  const isStem = chance(0.1)\n\n  return element.make({\n    type: NAME,\n    kind: isStem ? 'stem' : 'bud',\n    flammable: true,\n    energy:\n      energy !== undefined ? energy : isStem ? randInt(10, 15) : randInt(1, 5),\n    direction: [pickRand([1, 0, -1]), -1],\n    color,\n  })\n}\n\nconst update = (sandpit, cell) => {\n  const [dx, dy] = cell.direction\n  const canGrow = sandpit.is(dx, dy, EMPTY)\n\n  if (canGrow) {\n    if (chance(0.2) && cell.energy > 0) {\n      cell.energy--\n      sandpit.set(dx, dy, make(cell.energy))\n    }\n  }\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    if (chance(0.05) && canGrow && sandpit.is(nx, ny, water.NAME)) {\n      sandpit.set(nx, ny, empty())\n      sandpit.set(dx, dy, make(cell.energy))\n    }\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY, empty } from './empty'\nimport * as wood from './wood'\nimport * as smoke from './smoke'\nimport * as oil from './oil'\nimport * as plant from './plant'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst NAME = 'FIRE'\nconst despawnChance = 0.2\nconst chanceOfGoingStraight = 0.73\nconst chanceOfSpread = 0.75\nconst ignitingChance = 1\nconst burningChance = 0.01\n\nconst extinguishChance = 0.01\nconst looseFlameChance = 0.06\n\nconst orange1 = [35, 76, 62, 72]\nconst orange2 = [35, 79, 67, 77]\nconst red1 = [7, 82, 56, 66]\nconst red2 = [7, 82, 49, 59]\nconst red3 = [7, 87, 33, 43]\n\nconst BASE_COLOR = orange1\n\nconst make = (phase = 'spark') =>\n  element.make({\n    type: NAME,\n    phase,\n    direction: pickRand([1, -1]),\n    color: pickRand([orange1, orange2, red1, red2, red3]),\n  })\n\nconst ignite = (sandpit) => {\n  let igniteTarget\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    if (\n      chance(ignitingChance) &&\n      (sandpit.is(nx, ny, wood.NAME) ||\n        sandpit.is(nx, ny, oil.NAME) ||\n        sandpit.is(nx, ny, plant.NAME))\n    ) {\n      igniteTarget = [nx, ny]\n      break\n    }\n  }\n\n  if (igniteTarget) {\n    sandpit.set(...igniteTarget, make('blaze'))\n    sandpit.set(0, 0, empty())\n  }\n}\n\nconst burn = (sandpit, spreadChance) => {\n  let burnTarget\n\n  for (let [nx, ny] of sandpit.neighbors2) {\n    if (\n      chance(spreadChance) &&\n      (sandpit.is(nx, ny, wood.NAME) ||\n        sandpit.is(nx, ny, oil.NAME) ||\n        sandpit.is(nx, ny, plant.NAME))\n    ) {\n      burnTarget = [nx, ny]\n      break\n    }\n  }\n  if (burnTarget) sandpit.set(...burnTarget, make('blaze'))\n}\n\nconst update = (sandpit, cell) => {\n  switch (cell.phase) {\n    case 'spark':\n      if (chance(despawnChance)) {\n        sandpit.set(0, 0, empty())\n      }\n\n      if (chance(chanceOfGoingStraight) && sandpit.is(0, -1, EMPTY)) {\n        sandpit.move(0, -1)\n      } else if (sandpit.is(cell.direction, -1, EMPTY)) {\n        sandpit.move(cell.direction, -1)\n      }\n\n      if (chance(chanceOfSpread) && sandpit.is(cell.direction, 0, EMPTY)) {\n        sandpit.move(cell.direction, 0)\n      } else {\n        cell.direction *= -1\n      }\n\n      ignite(sandpit)\n      break\n    case 'blaze':\n      burn(sandpit, burningChance)\n\n      if (chance(extinguishChance)) {\n        sandpit.set(0, 0, smoke.make())\n        return\n      } else if (sandpit.is(0, -1, EMPTY)) {\n        if (chance(looseFlameChance)) {\n          sandpit.set(0, -1, make())\n        } else if (chance(0.05)) {\n          sandpit.set(0, -1, smoke.make())\n        }\n      }\n\n      let noNeighbors = true\n\n      for (let [nx, ny] of sandpit.neighbors1) {\n        if (!sandpit.is(nx, ny, EMPTY)) {\n          noNeighbors = false\n          break\n        }\n      }\n      if (noNeighbors) {\n        sandpit.set(0, 0, empty())\n      }\n      break\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as element from '../element'\nimport * as fire from './fire'\nimport * as oil from './oil'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [216, 65, 60, 50]\n\nconst NAME = 'WATER'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    slimey: false,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n\n  switch (below.type) {\n    case fire.NAME:\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case oil.NAME:\n      sandpit.swap(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, 1)\n      }\n      break\n  }\n\n  if (\n    sandpit.is(cell.direction, 0, EMPTY) ||\n    sandpit.is(cell.direction, 0, fire.NAME)\n  ) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n\n  if (chance(0.005)) {\n    element.refreshColor(cell)\n  }\n\n  if (cell.slimey) {\n    element.setColor([163, 79, 79, 75], cell)\n    cell.slimey = false\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as water from './water'\nimport * as oil from './oil'\nimport * as element from '../element'\nimport { pickRand } from '../random'\n\nconst BASE_COLOR = [46, 78, 75, 50]\n\nconst NAME = 'SAND'\n\nconst make = () => element.make({ type: NAME, color: BASE_COLOR })\n\nconst update = (sandpit) => {\n  const below = sandpit.get(0, 1)\n  const direction = pickRand([1, -1])\n\n  switch (below.type) {\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case oil.NAME:\n    case water.NAME:\n      sandpit.swap(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(direction, 1, EMPTY)) {\n        sandpit.move(direction, 1)\n      }\n      break\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import * as element from '../element'\n\nconst BASE_COLOR = [0, 0, 60, 40]\n\nconst NAME = 'STONE'\n\nconst make = () => element.make({ type: NAME, color: BASE_COLOR })\n\nexport { NAME, make, BASE_COLOR }\n","import { EMPTY, empty } from './empty'\nimport * as water from './water'\nimport * as oil from './oil'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [130, 79, 84, 80]\n\nconst NAME = 'SLIME'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    drip: [],\n    direction: pickRand([1, -1]),\n    color: [130, 79, 84, 80],\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n  const direction = pickRand([1, -1])\n\n  let neighborCount = 0\n\n  for (let n of sandpit.neighbors1) {\n    const nbr = sandpit.get(...n)\n\n    if (nbr.type === water.NAME && chance(0.01)) {\n      nbr.slimey = true\n      sandpit.set(0, 0, empty())\n      return\n    }\n\n    if (nbr.type !== EMPTY) neighborCount++\n  }\n\n  const unstuck = chance((5 - neighborCount) / 5)\n\n  switch (below.type) {\n    case EMPTY:\n      if (unstuck) {\n        sandpit.move(0, 1)\n      }\n\n      break\n    case oil.NAME:\n      sandpit.swap(0, 1)\n      break\n    case water.NAME:\n      if (chance(0.05)) sandpit.set(0, 0, empty())\n      else sandpit.swap(0, 1)\n\n      break\n    case NAME:\n      if (unstuck && sandpit.is(direction, 1, EMPTY)) {\n        sandpit.move(direction, 1)\n      }\n      break\n  }\n\n  if (sandpit.is(cell.direction, 0, EMPTY)) {\n    if (unstuck) sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\nimport * as fire from './fire'\nimport * as water from './water'\nimport * as stone from './stone'\nimport * as smoke from './smoke'\n\nconst BASE_COLOR = [20, 64, 55, 50]\n\nconst NAME = 'LAVA'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n\n  switch (below.type) {\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, 1)\n      }\n      break\n  }\n\n  if (chance(0.5) && sandpit.is(cell.direction, 0, EMPTY)) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n\n  if (chance(0.005) && sandpit.is(0, -1, EMPTY)) {\n    sandpit.set(0, -1, fire.make())\n  }\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    const nbr = sandpit.get(nx, ny)\n\n    if (nbr.flammable) {\n      sandpit.set(nx, ny, fire.make('blaze'))\n    } else if (nbr.type === water.NAME) {\n      sandpit.set(0, 0, stone.make())\n      sandpit.set(nx, ny, smoke.make())\n    }\n  }\n\n  if (chance(0.005)) {\n    element.refreshColor(cell)\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import * as sand from './sand'\nimport * as stone from './stone'\nimport * as empty from './empty'\nimport * as water from './water'\nimport * as smoke from './smoke'\nimport * as wood from './wood'\nimport * as fire from './fire'\nimport * as oil from './oil'\nimport * as plant from './plant'\nimport * as slime from './slime'\nimport * as lava from './lava'\n\nexport const activeElements = {\n  [sand.NAME]: sand,\n  [water.NAME]: water,\n  [smoke.NAME]: smoke,\n  [fire.NAME]: fire,\n  [oil.NAME]: oil,\n  [plant.NAME]: plant,\n  [slime.NAME]: slime,\n  [lava.NAME]: lava,\n}\n\nexport default {\n  sand,\n  stone,\n  empty,\n  water,\n  smoke,\n  wood,\n  fire,\n  oil,\n  plant,\n  slime,\n  lava,\n}\n","import { empty, EMPTY } from './elements/empty'\n\nimport { activeElements } from './elements'\n\nlet cells = []\nlet size = 0\nlet generation\nlet upperBound\nlet defaultUpperBound\nlet activeCells = {}\nconst BOUNDS = { type: 'BOUNDS' }\n\nconst init = (newSize = 100) => {\n  generation = 1\n  defaultUpperBound = { x: 0, y: newSize }\n  upperBound = defaultUpperBound\n  size = newSize\n  cells = Array.from({ length: size * size }, () => empty())\n}\n\nconst get = (x, y) => {\n  if (x < 0 || y < 0 || x >= size || y >= size) return BOUNDS\n  return cells[getIndex(x, y)]\n}\n\nconst set = (x, y, cell = empty()) => {\n  const index = getIndex(x, y)\n\n  cell.clock = generation + 1\n  cells[index] = cell\n\n  if (y < upperBound.y) upperBound = { x, y }\n}\n\nconst makeNeighbors = (range = 1) => {\n  return Array.from({ length: range }, (_, i) => {\n    const n = i + 1\n    return [\n      [n * -1, n * -1],\n      [n * -1, 0],\n      [n * -1, n * 1],\n      [0, n * -1],\n      [0, n * 1],\n      [n * 1, n * -1],\n      [n * 1, 0],\n      [n * 1, n * 1],\n    ]\n  }).flat()\n}\n\nconst neighbors1 = makeNeighbors(1)\nconst neighbors2 = makeNeighbors(2)\n\nconst createApi = (cx, cy) => {\n  const relativeGet = (dx, dy) => get(cx + dx, cy + dy)\n  const relativeSet = (dx, dy, cell) => set(cx + dx, cy + dy, cell)\n\n  const is = (dx, dy, type) => get(cx + dx, cy + dy).type === type\n\n  const move = (dx, dy) => {\n    const cell = get(cx, cy)\n\n    if (cell.clock > generation) return\n\n    set(cx + dx, cy + dy, cell)\n    set(cx, cy, empty())\n  }\n\n  const swap = (dx, dy) => {\n    const c0 = get(cx, cy)\n\n    if (c0.clock > generation) return\n\n    const x = cx + dx\n    const y = cy + dy\n    const c1 = get(x, y)\n\n    set(x, y, c0)\n    set(cx, cy, c1)\n  }\n\n  return {\n    is,\n    move,\n    swap,\n    set: relativeSet,\n    get: relativeGet,\n    neighbors1,\n    neighbors2,\n  }\n}\n\nconst coordsCache = {}\n\nconst self = createApi(0, 0)\n\nconst getIndex = (x, y) => x * size + y\n\nconst getCoords = (index) => {\n  const cache = coordsCache[index]\n\n  if (cache !== undefined) return cache\n\n  const y = index % size\n  const x = (index - y) / size\n\n  return (coordsCache[index] = [x, y])\n}\n\nconst draw = (x, y, cell) => {\n  if (x < 0 || y < 0 || x >= size || y >= size) return\n  if (cell.type === EMPTY || self.is(x, y, EMPTY)) {\n    const index = getIndex(x, y)\n    cell.clock = generation\n    cells[index] = cell\n    if (y < upperBound.y) upperBound = { x, y }\n  }\n}\n\nconst update = () => {\n  activeCells = {}\n\n  for (let i = 0, l = cells.length; i < l; i++) {\n    const [x, y] = getCoords(i)\n    const cell = cells[i]\n\n    if (cell.type !== EMPTY) {\n      const cellsForColor = activeCells[cell.color]\n      if (cellsForColor !== undefined) {\n        cellsForColor.push({ x, y, cell })\n      } else {\n        activeCells[cell.color] = [{ x, y, cell }]\n      }\n    }\n\n    const element = activeElements[cell.type]\n\n    if (element !== undefined) {\n      element.update(createApi(x, y), cell)\n    }\n  }\n\n  generation++\n}\n\nconst getUpperBound = () => upperBound.y\n\nconst refreshUpperBound = () => {\n  if (self.is(upperBound.x, upperBound.y, EMPTY)) {\n    upperBound = defaultUpperBound\n  }\n}\n\nconst getActive = () => activeCells\n\nconst getCirularNeighbors = (r, center) => {\n  const [cx, cy] = center\n  const cells = []\n\n  for (let x = cx - r; x <= cx; x++) {\n    for (let y = cy - r; y <= cy; y++) {\n      if ((x - cx) * (x - cx) + (y - cy) * (y - cy) <= r * r) {\n        const xSym = cx - (x - cx)\n        const ySym = cy - (y - cy)\n\n        cells.push([x, y], [x, ySym], [xSym, y], [xSym, ySym])\n      }\n    }\n  }\n\n  return cells\n}\n\nexport {\n  init,\n  getUpperBound,\n  refreshUpperBound,\n  draw,\n  update,\n  getActive,\n  getCirularNeighbors,\n}\n","const width = 600\nconst height = 600\nconst cellSize = 5\nconst boundsOffset = 5\nlet ctx\n\nconst init = () => {\n  const canvas = document.createElement('canvas')\n\n  ctx = canvas.getContext('2d', { alpha: false })\n\n  const dpr = window.devicePixelRatio || 1\n\n  canvas.width = width * dpr\n  canvas.height = height * dpr\n  canvas.style.width = `${width}px`\n  canvas.style.height = `${height}px`\n  document.querySelector('#canvas-target').prepend(canvas)\n  ctx.scale(dpr, dpr)\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, 0, width, height)\n\n  return canvas\n}\n\nconst draw = (world) => {\n  const boundingY = world.getUpperBound() * cellSize - boundsOffset\n\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, boundingY, width, height - boundingY)\n\n  if (window.DEBUG) {\n    ctx.fillStyle = 'red'\n    ctx.fillRect(0, boundingY, width, 1)\n  }\n\n  const activeCells = world.getActive()\n\n  for (let color in activeCells) {\n    ctx.fillStyle = color\n    const blocks = activeCells[color]\n\n    let i = blocks.length\n\n    while (i--) {\n      const { x, y } = blocks[i]\n      ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize)\n    }\n  }\n}\n\nexport { init, draw, cellSize }\n","import * as sandpit from './sandpit'\nimport * as canvas from './canvas'\nimport elements from './elements'\n\nwindow.DEBUG = false\nconst MAX_FPS = 60\nlet now, elapsed, then, fpsInterval\n\nconst tick = () => {\n  sandpit.update()\n  canvas.draw(sandpit)\n}\n\nconst loop = () => {\n  requestAnimationFrame(loop)\n  now = Date.now()\n  elapsed = now - then\n\n  if (elapsed > fpsInterval) {\n    then = now - (elapsed % fpsInterval)\n    tick()\n  }\n}\n\nconst start = () => {\n  fpsInterval = 1000 / MAX_FPS\n  then = Date.now()\n  loop()\n}\n\nlet selectedElement = elements.sand\nlet previousElementBtn\n\nconst elementsGrid = document.querySelector('.elements')\n\nObject.values(elements).forEach((element) => {\n  const btn = document.createElement('button')\n  const [h, s, l] = element.BASE_COLOR || []\n\n  if (element.NAME === elements.sand.NAME) {\n    previousElementBtn = btn\n    btn.classList.add('element-selected')\n  }\n  btn.textContent = element.NAME.toLowerCase()\n  btn.classList.add(element.NAME.toLowerCase() + '-btn')\n  btn.classList.add('element-btn')\n  btn.style.background = `hsl(${h}deg ${s}% ${l}%)`\n\n  btn.addEventListener('click', () => {\n    previousElementBtn.classList.remove('element-selected')\n    btn.classList.add('element-selected')\n    previousElementBtn = btn\n    return (selectedElement = element)\n  })\n\n  elementsGrid.appendChild(btn)\n})\n\nconst toolSizes = [1, 4, 8, 12]\n\nconst toolsGrid = document.querySelector('.tools')\n\nlet selectedSize = 1\nlet previousSize\n\ntoolSizes.forEach((tool) => {\n  const btn = document.createElement('button')\n  btn.classList.add('tool-btn')\n\n  if (selectedSize === tool) {\n    previousSize = btn\n    btn.classList.add('tool-selected')\n  }\n\n  btn.textContent = tool\n\n  btn.addEventListener('click', () => {\n    previousSize.classList.remove('tool-selected')\n    btn.classList.add('tool-selected')\n    previousSize = btn\n    return (selectedSize = tool)\n  })\n\n  toolsGrid.appendChild(btn)\n})\n\nconst resetBtn = document.createElement('button')\n\nresetBtn.classList.add('tool-btn')\nresetBtn.classList.add('reset-btn')\n\nresetBtn.textContent = 'RESET'\n\nresetBtn.addEventListener('click', () => {\n  window.location.reload()\n})\n\ntoolsGrid.appendChild(resetBtn)\n\nconst tickBtn = document.querySelector('#tick')\n\ntickBtn.addEventListener('click', tick)\n\nif (!window.DEBUG) {\n  tickBtn.classList.add('hidden')\n}\n\nconst $canvas = canvas.init()\nconst canvasBounds = $canvas.getBoundingClientRect()\n\nlet drawing = false\n\nconst coord = (c) => Math.floor(c / canvas.cellSize)\n\nconst getCoords = (e) => {\n  const x = coord(e.x - canvasBounds.x)\n  const y = coord(e.y - canvasBounds.y)\n\n  return sandpit.getCirularNeighbors(selectedSize, [x, y])\n}\n\nconst handleDrawing = (e) => {\n  getCoords(e).forEach((coords) =>\n    sandpit.draw(...coords, selectedElement.make()),\n  )\n}\n\n$canvas.addEventListener('mousemove', (e) => {\n  if (drawing) handleDrawing(e)\n})\n$canvas.addEventListener('click', handleDrawing)\n$canvas.addEventListener('mousedown', () => {\n  drawing = true\n})\n$canvas.addEventListener('mouseup', () => {\n  drawing = false\n  sandpit.refreshUpperBound()\n})\n\nsandpit.init(120)\n\nif (!window.DEBUG) {\n  start()\n}\n"]}