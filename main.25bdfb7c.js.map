{"version":3,"sources":["elements/empty.js","random.js","element.js","elements/smoke.js","elements/fire.js","elements/oil.js","elements/water.js","elements/sand.js","elements/stone.js","elements/wood.js","elements/plant.js","elements/slime.js","elements/lava.js","elements/bug.js","elements/index.js","sandpit.js","canvas.js","main.js"],"names":["EMPTY","NAME","empty_","type","clock","empty","make","rand","max","min","Math","random","randInt","round","pickRand","values","length","chance","threshold","color","meta","colorInput","createColor","setColor","cell","refreshColor","BASE_COLOR","despawnChance","chanceOfGoingStraight","chanceOfSpread","element","direction","update","sandpit","above","get","set","move","is","water","ignitingChance","burningChance","extinguishChance","looseFlameChance","orange1","orange2","red1","red2","red3","phase","ignite","igniteTarget","neighbors1","nx","ny","flammable","burn","spreadChance","burnTarget","neighbors2","smoke","noNeighbors","below","fire","swap","slimey","oil","energy","isStem","kind","undefined","dx","dy","canGrow","drip","neighborCount","n","nbr","unstuck","stone","movementRate","species","jumpDirection","climbing","updateClimber","updateJumper","updateFlyer","plant","jumping","flyingDirection","fx","fy","x","y","activeElements","sand","slime","lava","bug","wood","generation","upperBound","defaultUpperBound","cells","size","activeCells","BOUNDS","init","newSize","Array","from","getIndex","index","makeNeighbors","range","_","i","flat","createApi","cx","cy","c0","c1","coordsCache","self","getCoords","cache","draw","l","cellsForColor","push","getUpperBound","refreshUpperBound","getActive","getCirularNeighbors","r","center","xSym","ySym","width","height","cellSize","ctx","boundsOffset","canvas","document","createElement","getContext","alpha","dpr","window","devicePixelRatio","style","querySelector","prepend","scale","fillStyle","fillRect","world","boundingY","DEBUG","blocks","now","elapsed","then","fpsInterval","previousElementBtn","MAX_FPS","tick","loop","requestAnimationFrame","Date","start","selectedElement","elements","elementsGrid","Object","forEach","btn","h","s","classList","add","textContent","toLowerCase","background","addEventListener","remove","appendChild","previousSize","toolSizes","toolsGrid","selectedSize","tool","resetBtn","location","reload","tickBtn","$canvas","canvasBounds","getBoundingClientRect","drawing","coord","c","floor","e","handleDrawing","coords"],"mappings":"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","file":"main.25bdfb7c.js","sourceRoot":"../src","sourcesContent":["const EMPTY = 'EMPTY'\nconst NAME = EMPTY\nconst empty_ = { type: EMPTY, clock: 0 }\nconst empty = () => empty_\nconst make = empty\n\nexport { EMPTY, empty, make, NAME }\n","const rand = (max, min = 0) => Math.random() * (max - min) + min\nconst randInt = (...args) => Math.round(rand(...args))\nconst pickRand = (values) => values[randInt(values.length - 1, 0)]\nconst chance = (threshold) => Math.random() < threshold\n\nexport { rand, randInt, pickRand, chance }\n","import { randInt } from './random'\n\nconst make = ({ type, color, ...meta }) => ({\n  type,\n  clock: 0,\n  colorInput: color,\n  color: createColor(color),\n  ...meta,\n})\n\nconst createColor = (color) =>\n  `hsl(${color[0]}deg ${color[1]}% ${randInt(color[2], color[3])}%)`\n\nconst setColor = (color, cell) => {\n  cell.color = createColor(color)\n}\n\nconst refreshColor = (cell) => {\n  cell.color = createColor(cell.colorInput)\n}\n\nexport { make, refreshColor, setColor }\n","import * as water from './water'\nimport { EMPTY, empty } from './empty'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [4, 2, 79, 90]\n\nconst NAME = 'SMOKE'\nconst despawnChance = 0.015\nconst chanceOfGoingStraight = 0.95\nconst chanceOfSpread = 0.5\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const above = sandpit.get(0, -1)\n\n  if (chance(despawnChance)) {\n    sandpit.set(0, 0, empty())\n  }\n\n  switch (above.type) {\n    case EMPTY:\n      if (chance(chanceOfGoingStraight)) {\n        sandpit.move(0, -1)\n      } else if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, -1)\n      }\n      break\n    case water.NAME:\n      sandpit.move(0, -1)\n      break\n  }\n\n  if (chance(chanceOfSpread) && sandpit.is(cell.direction, 0, EMPTY)) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY, empty } from './empty'\nimport * as smoke from './smoke'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst NAME = 'FIRE'\nconst despawnChance = 0.2\nconst chanceOfGoingStraight = 0.73\nconst chanceOfSpread = 0.75\nconst ignitingChance = 1\nconst burningChance = 0.01\n\nconst extinguishChance = 0.01\nconst looseFlameChance = 0.06\n\nconst orange1 = [35, 76, 62, 72]\nconst orange2 = [35, 79, 67, 77]\nconst red1 = [7, 82, 56, 66]\nconst red2 = [7, 82, 49, 59]\nconst red3 = [7, 87, 33, 43]\n\nconst BASE_COLOR = orange1\n\nconst make = (phase = 'spark') =>\n  element.make({\n    type: NAME,\n    phase,\n    direction: pickRand([1, -1]),\n    color: pickRand([orange1, orange2, red1, red2, red3]),\n  })\n\nconst ignite = (sandpit) => {\n  let igniteTarget\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    if (chance(ignitingChance) && sandpit.get(nx, ny).flammable) {\n      igniteTarget = [nx, ny]\n      break\n    }\n  }\n\n  if (igniteTarget) {\n    sandpit.set(...igniteTarget, make('blaze'))\n    sandpit.set(0, 0, empty())\n  }\n}\n\nconst burn = (sandpit, spreadChance) => {\n  let burnTarget\n\n  for (let [nx, ny] of sandpit.neighbors2) {\n    if (chance(spreadChance) && sandpit.get(nx, ny).flammable) {\n      burnTarget = [nx, ny]\n      break\n    }\n  }\n  if (burnTarget) sandpit.set(...burnTarget, make('blaze'))\n}\n\nconst update = (sandpit, cell) => {\n  switch (cell.phase) {\n    case 'spark':\n      if (chance(despawnChance)) {\n        sandpit.set(0, 0, empty())\n      }\n\n      if (chance(chanceOfGoingStraight) && sandpit.is(0, -1, EMPTY)) {\n        sandpit.move(0, -1)\n      } else if (sandpit.is(cell.direction, -1, EMPTY)) {\n        sandpit.move(cell.direction, -1)\n      }\n\n      if (chance(chanceOfSpread) && sandpit.is(cell.direction, 0, EMPTY)) {\n        sandpit.move(cell.direction, 0)\n      } else {\n        cell.direction *= -1\n      }\n\n      ignite(sandpit)\n      break\n    case 'blaze':\n      burn(sandpit, burningChance)\n\n      if (chance(extinguishChance)) {\n        sandpit.set(0, 0, smoke.make())\n        return\n      } else if (sandpit.is(0, -1, EMPTY)) {\n        if (chance(looseFlameChance)) {\n          sandpit.set(0, -1, make())\n        } else if (chance(0.05)) {\n          sandpit.set(0, -1, smoke.make())\n        }\n      }\n\n      let noNeighbors = true\n\n      for (let [nx, ny] of sandpit.neighbors1) {\n        if (!sandpit.is(nx, ny, EMPTY)) {\n          noNeighbors = false\n          break\n        }\n      }\n      if (noNeighbors) {\n        sandpit.set(0, 0, empty())\n      }\n      break\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as element from '../element'\nimport * as fire from './fire'\nimport * as water from './water'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [25, 59, 41, 48]\n\nconst NAME = 'OIL'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    flammable: true,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n\n  switch (below.type) {\n    case fire.NAME:\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, 1)\n      }\n      break\n    case water.NAME:\n      if (sandpit.is(cell.direction, -1, water.NAME)) {\n        sandpit.swap(cell.direction, -1)\n      }\n      break\n  }\n\n  if (sandpit.is(cell.direction, 0, EMPTY)) {\n    sandpit.move(cell.direction, 0)\n  } else if (chance(0.5) && sandpit.is(cell.direction, 0, water.NAME)) {\n    sandpit.swap(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n\n  if (chance(0.005)) {\n    element.refreshColor(cell)\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as element from '../element'\nimport * as fire from './fire'\nimport * as oil from './oil'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [216, 65, 60, 50]\n\nconst NAME = 'WATER'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    slimey: false,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n\n  switch (below.type) {\n    case fire.NAME:\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case oil.NAME:\n      sandpit.swap(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, 1)\n      }\n      break\n  }\n\n  if (\n    sandpit.is(cell.direction, 0, EMPTY) ||\n    sandpit.is(cell.direction, 0, fire.NAME)\n  ) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n\n  if (chance(0.005)) {\n    element.refreshColor(cell)\n  }\n\n  if (cell.slimey) {\n    element.setColor([163, 79, 79, 75], cell)\n    cell.slimey = false\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as water from './water'\nimport * as oil from './oil'\nimport * as element from '../element'\nimport { pickRand } from '../random'\n\nconst BASE_COLOR = [46, 78, 75, 50]\n\nconst NAME = 'SAND'\n\nconst make = () => element.make({ type: NAME, color: BASE_COLOR })\n\nconst update = (sandpit) => {\n  const below = sandpit.get(0, 1)\n  const direction = pickRand([1, -1])\n\n  switch (below.type) {\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case oil.NAME:\n    case water.NAME:\n      sandpit.swap(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(direction, 1, EMPTY)) {\n        sandpit.move(direction, 1)\n      }\n      break\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import * as element from '../element'\n\nconst BASE_COLOR = [0, 0, 60, 40]\n\nconst NAME = 'STONE'\n\nconst make = () => element.make({ type: NAME, color: BASE_COLOR })\n\nexport { NAME, make, BASE_COLOR }\n","import * as element from '../element'\n\nconst BASE_COLOR = [33, 41, 30, 15]\n\nconst NAME = 'WOOD'\n\nconst make = () =>\n  element.make({ type: NAME, flammable: true, color: BASE_COLOR })\n\nexport { NAME, make, BASE_COLOR }\n","import { empty, EMPTY } from './empty'\nimport * as water from './water'\nimport * as element from '../element'\nimport { chance, pickRand, randInt } from '../random'\n\nconst BASE_COLOR = [122, 73, 36, 30]\n\nconst NAME = 'PLANT'\n\nconst make = (energy, color = BASE_COLOR) => {\n  const isStem = chance(0.1)\n\n  return element.make({\n    type: NAME,\n    kind: isStem ? 'stem' : 'bud',\n    flammable: true,\n    energy:\n      energy !== undefined ? energy : isStem ? randInt(10, 15) : randInt(1, 5),\n    direction: [pickRand([1, 0, -1]), -1],\n    color,\n  })\n}\n\nconst update = (sandpit, cell) => {\n  const [dx, dy] = cell.direction\n  const canGrow = sandpit.is(dx, dy, EMPTY)\n\n  if (canGrow) {\n    if (chance(0.2) && cell.energy > 0) {\n      cell.energy--\n      sandpit.set(dx, dy, make(cell.energy))\n    }\n  }\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    if (chance(0.05) && canGrow && sandpit.is(nx, ny, water.NAME)) {\n      sandpit.set(nx, ny, empty())\n      sandpit.set(dx, dy, make(cell.energy))\n    }\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY, empty } from './empty'\nimport * as water from './water'\nimport * as oil from './oil'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [130, 79, 84, 80]\n\nconst NAME = 'SLIME'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    drip: [],\n    direction: pickRand([1, -1]),\n    color: [130, 79, 84, 80],\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n  const direction = pickRand([1, -1])\n\n  let neighborCount = 0\n\n  for (let n of sandpit.neighbors1) {\n    const nbr = sandpit.get(...n)\n\n    if (nbr.type === water.NAME && chance(0.01)) {\n      nbr.slimey = true\n      sandpit.set(0, 0, empty())\n      return\n    }\n\n    if (nbr.type !== EMPTY) neighborCount++\n  }\n\n  const unstuck = chance((5 - neighborCount) / 5)\n\n  switch (below.type) {\n    case EMPTY:\n      if (unstuck) {\n        sandpit.move(0, 1)\n      }\n\n      break\n    case oil.NAME:\n      sandpit.swap(0, 1)\n      break\n    case water.NAME:\n      if (chance(0.05)) sandpit.set(0, 0, empty())\n      else sandpit.swap(0, 1)\n\n      break\n    case NAME:\n      if (unstuck && sandpit.is(direction, 1, EMPTY)) {\n        sandpit.move(direction, 1)\n      }\n      break\n  }\n\n  if (sandpit.is(cell.direction, 0, EMPTY)) {\n    if (unstuck) sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\nimport * as fire from './fire'\nimport * as water from './water'\nimport * as stone from './stone'\nimport * as smoke from './smoke'\n\nconst BASE_COLOR = [20, 64, 55, 50]\n\nconst NAME = 'LAVA'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n\n  switch (below.type) {\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, 1)\n      }\n      break\n  }\n\n  if (chance(0.5) && sandpit.is(cell.direction, 0, EMPTY)) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n\n  if (chance(0.005) && sandpit.is(0, -1, EMPTY)) {\n    sandpit.set(0, -1, fire.make())\n  }\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    const nbr = sandpit.get(nx, ny)\n\n    if (nbr.flammable) {\n      sandpit.set(nx, ny, fire.make('blaze'))\n    } else if (nbr.type === water.NAME) {\n      sandpit.set(0, 0, stone.make())\n      sandpit.set(nx, ny, smoke.make())\n    }\n  }\n\n  if (chance(0.005)) {\n    element.refreshColor(cell)\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY, empty } from './empty'\nimport * as plant from './plant'\nimport * as water from './water'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [277, 59, 50, 20]\n\nconst NAME = 'BUG'\n\nconst movementRate = 0.02\n\nconst make = () => {\n  const [species, color] = pickRand([\n    ['climber', BASE_COLOR],\n    ['jumper', [277, 62, 66, 60]],\n    ['flyer', [277, 33, 36, 30]],\n  ])\n\n  return element.make({\n    type: NAME,\n    species,\n    flammable: true,\n    jumpDirection: 0,\n    climbing: false,\n    direction: pickRand([1, -1]),\n    color: color,\n  })\n}\n\nconst update = (sandpit, cell) => {\n  switch (cell.species) {\n    case 'climber':\n      updateClimber(sandpit, cell)\n      break\n    case 'jumper':\n      updateJumper(sandpit, cell)\n      break\n    case 'flyer':\n      updateFlyer(sandpit, cell)\n      break\n  }\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    if (chance(0.005) && sandpit.is(nx, ny, plant.NAME)) {\n      sandpit.set(nx, ny, empty())\n      break\n    }\n  }\n\n  if (chance(0.02) && sandpit.is(0, -1, water.NAME)) {\n    if (chance(0.05)) {\n      sandpit.set(0, 0, empty())\n    } else {\n      sandpit.swap(0, -1)\n    }\n  }\n}\n\nconst updateClimber = (sandpit, cell) => {\n  if (cell.climbing) {\n    if (chance(movementRate) && sandpit.is(0, cell.direction, EMPTY)) {\n      if (sandpit.is(cell.direction, cell.direction, EMPTY)) {\n        cell.climbing = false\n        sandpit.move(cell.direction, cell.direction)\n      } else {\n        sandpit.move(0, cell.direction)\n      }\n    } else {\n      cell.direction *= -1\n    }\n  } else {\n    const below = sandpit.get(0, 1)\n    const direction = pickRand([1, -1])\n\n    switch (below.type) {\n      case EMPTY:\n        sandpit.move(0, 1)\n        break\n      case NAME:\n        if (sandpit.is(direction, 1, EMPTY)) {\n          sandpit.move(direction, 1)\n        }\n        break\n    }\n\n    if (chance(movementRate)) {\n      if (sandpit.is(cell.direction, 0, EMPTY)) {\n        sandpit.move(cell.direction, 0)\n      } else if (chance(0.5) && sandpit.is(0, cell.direction, EMPTY)) {\n        cell.climbing = !cell.climbing\n        cell.direction = pickRand([1, -1])\n      } else {\n        cell.direction *= -1\n      }\n    }\n  }\n}\n\nconst updateJumper = (sandpit, cell) => {\n  if (cell.jumping) {\n    if (sandpit.is(cell.jumpDirection, -1, EMPTY)) {\n      sandpit.move(cell.jumpDirection, -1)\n    } else {\n      cell.jumping = false\n      cell.jumpDirection = pickRand([1, -1])\n    }\n\n    if (chance(0.1)) {\n      cell.jumping = false\n    }\n  } else {\n    const below = sandpit.get(cell.jumpDirection, 1)\n    const direction = pickRand([1, -1])\n\n    switch (below.type) {\n      case EMPTY:\n        sandpit.move(cell.jumpDirection, 1)\n        break\n      case NAME:\n        if (sandpit.is(direction, 1, EMPTY)) {\n          sandpit.move(direction, 1)\n        }\n        break\n      default:\n        cell.jumpDirection = 0\n\n        if (chance(0.05)) {\n          cell.jumping = true\n          cell.jumpDirection = pickRand([1, 0, -1])\n        }\n        break\n    }\n\n    if (chance(movementRate)) {\n      if (sandpit.is(cell.direction, 0, EMPTY)) {\n        sandpit.move(cell.direction, 0)\n      } else {\n        cell.direction *= -1\n      }\n    }\n  }\n}\n\nconst updateFlyer = (sandpit, cell) => {\n  if (!cell.flyingDirection || chance(0.05)) {\n    const x = pickRand([1, 0, -1])\n    const y = pickRand(x === 0 ? [1, -1] : [1, 0, -1])\n\n    cell.flyingDirection = [x, y]\n    return\n  }\n\n  const [fx, fy] = cell.flyingDirection\n\n  if (sandpit.is(fx, fy, EMPTY)) {\n    sandpit.move(fx, fy)\n  } else if (chance(0.005)) {\n    cell.flyingDirection[pickRand([0, 1])] *= -1\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import * as sand from './sand'\nimport * as stone from './stone'\nimport * as empty from './empty'\nimport * as water from './water'\nimport * as smoke from './smoke'\nimport * as wood from './wood'\nimport * as fire from './fire'\nimport * as oil from './oil'\nimport * as plant from './plant'\nimport * as slime from './slime'\nimport * as lava from './lava'\nimport * as bug from './bug'\n\nexport const activeElements = {\n  [sand.NAME]: sand,\n  [water.NAME]: water,\n  [smoke.NAME]: smoke,\n  [fire.NAME]: fire,\n  [oil.NAME]: oil,\n  [plant.NAME]: plant,\n  [slime.NAME]: slime,\n  [lava.NAME]: lava,\n  [bug.NAME]: bug,\n}\n\nexport default {\n  sand,\n  stone,\n  empty,\n  water,\n  smoke,\n  wood,\n  fire,\n  oil,\n  plant,\n  slime,\n  lava,\n  bug,\n}\n","import { empty, EMPTY } from './elements/empty'\n\nimport { activeElements } from './elements'\n\nlet cells = []\nlet size = 0\nlet generation\nlet upperBound\nlet defaultUpperBound\nlet activeCells = {}\nconst BOUNDS = { type: 'BOUNDS' }\n\nconst init = (newSize = 100) => {\n  generation = 1\n  defaultUpperBound = { x: 0, y: newSize }\n  upperBound = defaultUpperBound\n  size = newSize\n  cells = Array.from({ length: size * size }, () => empty())\n}\n\nconst get = (x, y) => {\n  if (x < 0 || y < 0 || x >= size || y >= size) return BOUNDS\n  return cells[getIndex(x, y)]\n}\n\nconst set = (x, y, cell = empty()) => {\n  const index = getIndex(x, y)\n\n  cell.clock = generation + 1\n  cells[index] = cell\n\n  if (y < upperBound.y) upperBound = { x, y }\n}\n\nconst makeNeighbors = (range = 1) => {\n  return Array.from({ length: range }, (_, i) => {\n    const n = i + 1\n    return [\n      [n * -1, n * -1],\n      [n * -1, 0],\n      [n * -1, n * 1],\n      [0, n * -1],\n      [0, n * 1],\n      [n * 1, n * -1],\n      [n * 1, 0],\n      [n * 1, n * 1],\n    ]\n  }).flat()\n}\n\nconst neighbors1 = makeNeighbors(1)\nconst neighbors2 = makeNeighbors(2)\n\nconst createApi = (cx, cy) => {\n  const relativeGet = (dx, dy) => get(cx + dx, cy + dy)\n  const relativeSet = (dx, dy, cell) => set(cx + dx, cy + dy, cell)\n\n  const is = (dx, dy, type) => get(cx + dx, cy + dy).type === type\n\n  const move = (dx, dy) => {\n    const cell = get(cx, cy)\n\n    if (cell.clock > generation) return\n\n    set(cx + dx, cy + dy, cell)\n    set(cx, cy, empty())\n  }\n\n  const swap = (dx, dy) => {\n    const c0 = get(cx, cy)\n\n    if (c0.clock > generation) return\n\n    const x = cx + dx\n    const y = cy + dy\n    const c1 = get(x, y)\n\n    set(x, y, c0)\n    set(cx, cy, c1)\n  }\n\n  return {\n    is,\n    move,\n    swap,\n    set: relativeSet,\n    get: relativeGet,\n    neighbors1,\n    neighbors2,\n  }\n}\n\nconst coordsCache = {}\n\nconst self = createApi(0, 0)\n\nconst getIndex = (x, y) => x * size + y\n\nconst getCoords = (index) => {\n  const cache = coordsCache[index]\n\n  if (cache !== undefined) return cache\n\n  const y = index % size\n  const x = (index - y) / size\n\n  return (coordsCache[index] = [x, y])\n}\n\nconst draw = (x, y, cell) => {\n  if (x < 0 || y < 0 || x >= size || y >= size) return\n  if (cell.type === EMPTY || self.is(x, y, EMPTY)) {\n    const index = getIndex(x, y)\n    cell.clock = generation\n    cells[index] = cell\n    if (y < upperBound.y) upperBound = { x, y }\n  }\n}\n\nconst update = () => {\n  activeCells = {}\n\n  for (let i = 0, l = cells.length; i < l; i++) {\n    const [x, y] = getCoords(i)\n    const cell = cells[i]\n\n    if (cell.type !== EMPTY) {\n      const cellsForColor = activeCells[cell.color]\n      if (cellsForColor !== undefined) {\n        cellsForColor.push({ x, y, cell })\n      } else {\n        activeCells[cell.color] = [{ x, y, cell }]\n      }\n    }\n\n    const element = activeElements[cell.type]\n\n    if (element !== undefined) {\n      element.update(createApi(x, y), cell)\n    }\n  }\n\n  generation++\n}\n\nconst getUpperBound = () => upperBound.y\n\nconst refreshUpperBound = () => {\n  if (self.is(upperBound.x, upperBound.y, EMPTY)) {\n    upperBound = defaultUpperBound\n  }\n}\n\nconst getActive = () => activeCells\n\nconst getCirularNeighbors = (r, center) => {\n  const [cx, cy] = center\n  const cells = []\n\n  for (let x = cx - r; x <= cx; x++) {\n    for (let y = cy - r; y <= cy; y++) {\n      if ((x - cx) * (x - cx) + (y - cy) * (y - cy) <= r * r) {\n        const xSym = cx - (x - cx)\n        const ySym = cy - (y - cy)\n\n        cells.push([x, y], [x, ySym], [xSym, y], [xSym, ySym])\n      }\n    }\n  }\n\n  return cells\n}\n\nexport {\n  init,\n  getUpperBound,\n  refreshUpperBound,\n  draw,\n  update,\n  getActive,\n  getCirularNeighbors,\n}\n","const width = 600\nconst height = 600\nconst cellSize = 5\nconst boundsOffset = 5\nlet ctx\n\nconst init = () => {\n  const canvas = document.createElement('canvas')\n\n  ctx = canvas.getContext('2d', { alpha: false })\n\n  const dpr = window.devicePixelRatio || 1\n\n  canvas.width = width * dpr\n  canvas.height = height * dpr\n  canvas.style.width = `${width}px`\n  canvas.style.height = `${height}px`\n  document.querySelector('#canvas-target').prepend(canvas)\n  ctx.scale(dpr, dpr)\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, 0, width, height)\n\n  return canvas\n}\n\nconst draw = (world) => {\n  const boundingY = world.getUpperBound() * cellSize - boundsOffset\n\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, boundingY, width, height - boundingY)\n\n  if (window.DEBUG) {\n    ctx.fillStyle = 'red'\n    ctx.fillRect(0, boundingY, width, 1)\n  }\n\n  const activeCells = world.getActive()\n\n  for (let color in activeCells) {\n    ctx.fillStyle = color\n    const blocks = activeCells[color]\n\n    let i = blocks.length\n\n    while (i--) {\n      const { x, y } = blocks[i]\n      ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize)\n    }\n  }\n}\n\nexport { init, draw, cellSize }\n","import * as sandpit from './sandpit'\nimport * as canvas from './canvas'\nimport elements from './elements'\n\nwindow.DEBUG = false\nconst MAX_FPS = 60\nlet now, elapsed, then, fpsInterval\n\nconst tick = () => {\n  sandpit.update()\n  canvas.draw(sandpit)\n}\n\nconst loop = () => {\n  requestAnimationFrame(loop)\n  now = Date.now()\n  elapsed = now - then\n\n  if (elapsed > fpsInterval) {\n    then = now - (elapsed % fpsInterval)\n    tick()\n  }\n}\n\nconst start = () => {\n  fpsInterval = 1000 / MAX_FPS\n  then = Date.now()\n  loop()\n}\n\nlet selectedElement = elements.sand\nlet previousElementBtn\n\nconst elementsGrid = document.querySelector('.elements')\n\nObject.values(elements).forEach((element) => {\n  const btn = document.createElement('button')\n  const [h, s, l] = element.BASE_COLOR || []\n\n  if (element.NAME === elements.sand.NAME) {\n    previousElementBtn = btn\n    btn.classList.add('element-selected')\n  }\n  btn.textContent = element.NAME.toLowerCase()\n  btn.classList.add(element.NAME.toLowerCase() + '-btn')\n  btn.classList.add('element-btn')\n  btn.style.background = `hsl(${h}deg ${s}% ${l}%)`\n\n  btn.addEventListener('click', () => {\n    previousElementBtn.classList.remove('element-selected')\n    btn.classList.add('element-selected')\n    previousElementBtn = btn\n    return (selectedElement = element)\n  })\n\n  elementsGrid.appendChild(btn)\n})\n\nconst toolSizes = [1, 4, 8, 12]\n\nconst toolsGrid = document.querySelector('.tools')\n\nlet selectedSize = 4\nlet previousSize\n\ntoolSizes.forEach((tool) => {\n  const btn = document.createElement('button')\n  btn.classList.add('tool-btn')\n\n  if (selectedSize === tool) {\n    previousSize = btn\n    btn.classList.add('tool-selected')\n  }\n\n  btn.textContent = tool\n\n  btn.addEventListener('click', () => {\n    previousSize.classList.remove('tool-selected')\n    btn.classList.add('tool-selected')\n    previousSize = btn\n    return (selectedSize = tool)\n  })\n\n  toolsGrid.appendChild(btn)\n})\n\nconst resetBtn = document.createElement('button')\n\nresetBtn.classList.add('tool-btn')\nresetBtn.classList.add('reset-btn')\n\nresetBtn.textContent = 'RESET'\n\nresetBtn.addEventListener('click', () => {\n  window.location.reload()\n})\n\ntoolsGrid.appendChild(resetBtn)\n\nconst tickBtn = document.querySelector('#tick')\n\ntickBtn.addEventListener('click', tick)\n\nif (!window.DEBUG) {\n  tickBtn.classList.add('hidden')\n}\n\nconst $canvas = canvas.init()\nconst canvasBounds = $canvas.getBoundingClientRect()\n\nlet drawing = false\n\nconst coord = (c) => Math.floor(c / canvas.cellSize)\n\nconst getCoords = (e) => {\n  const x = coord(e.x - canvasBounds.x)\n  const y = coord(e.y - canvasBounds.y)\n\n  return sandpit.getCirularNeighbors(selectedSize, [x, y])\n}\n\nconst handleDrawing = (e) => {\n  getCoords(e).forEach((coords) =>\n    sandpit.draw(...coords, selectedElement.make()),\n  )\n}\n\n$canvas.addEventListener('mousemove', (e) => {\n  if (drawing) handleDrawing(e)\n})\n$canvas.addEventListener('click', handleDrawing)\n$canvas.addEventListener('mousedown', () => {\n  drawing = true\n})\n$canvas.addEventListener('mouseup', () => {\n  drawing = false\n  sandpit.refreshUpperBound()\n})\n\nsandpit.init(120)\n\nif (!window.DEBUG) {\n  start()\n}\n"]}