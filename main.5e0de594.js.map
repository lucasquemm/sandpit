{"version":3,"sources":["elements/empty.js","random.js","element.js","elements/wood.js","elements/smoke.js","elements/oil.js","elements/plant.js","elements/fire.js","elements/water.js","elements/sand.js","elements/stone.js","elements/slime.js","elements/index.js","sandpit.js","canvas.js","main.js"],"names":["EMPTY","NAME","empty","type","clock","make","rand","max","min","Math","random","randInt","round","pickRand","values","length","chance","threshold","color","meta","colorInput","createColor","setColor","cell","refreshColor","BASE_COLOR","element","despawnChance","chanceOfGoingStraight","chanceOfSpread","direction","update","sandpit","above","get","set","move","is","water","below","fire","swap","energy","isStem","kind","undefined","dx","dy","neighbors1","nx","ny","ignitingChance","burningChance","extinguishChance","looseFlameChance","orange1","orange2","red1","red2","red3","phase","ignite","igniteTarget","wood","oil","plant","burn","spreadChance","burnTarget","neighbors2","smoke","noNeighbors","slimey","drip","neighborCount","n","nbr","unstuck","activeElements","sand","slime","stone","generation","upperBound","defaultUpperBound","activeCells","cells","size","init","newSize","x","y","Array","from","getIndex","index","makeNeighbors","range","_","i","flat","createApi","cx","cy","c0","c1","self","getCoords","draw","l","push","getUpperBound","refreshUpperBound","getActive","width","height","cellSize","canvas","document","querySelector","ctx","getContext","alpha","dpr","window","devicePixelRatio","boundsOffset","style","scale","fillStyle","fillRect","world","boundingY","DEBUG","blocks","now","elapsed","then","fpsInterval","MAX_FPS","tick","loop","requestAnimationFrame","Date","start","$canvas","drawing","coord","c","floor","e","handleDrawing","forEach","coords","useElement","addEventListener","previousElementBtn","selectedElement","elements","elementsGrid","Object","btn","createElement","h","s","classList","add","textContent","toLowerCase","background","remove","appendChild","tickBtn"],"mappings":"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","file":"main.5e0de594.js","sourceRoot":"../src","sourcesContent":["const EMPTY = 'EMPTY'\nconst NAME = EMPTY\nconst empty = () => ({ type: EMPTY, clock: 0 })\nconst make = empty\n\nexport { EMPTY, empty, make, NAME }\n","const rand = (max, min = 0) => Math.random() * (max - min) + min\nconst randInt = (...args) => Math.round(rand(...args))\nconst pickRand = (values) => values[randInt(values.length - 1, 0)]\nconst chance = (threshold) => Math.random() < threshold\n\nexport { rand, randInt, pickRand, chance }\n","import { randInt } from './random'\n\nconst make = ({ type, color, ...meta }) => ({\n  type,\n  clock: 0,\n  colorInput: color,\n  color: createColor(color),\n  ...meta,\n})\n\nconst createColor = (color) =>\n  `hsl(${color[0]}deg ${color[1]}% ${randInt(color[2], color[3])}%)`\n\nconst setColor = (color, cell) => {\n  cell.color = createColor(color)\n}\n\nconst refreshColor = (cell) => {\n  cell.color = createColor(cell.colorInput)\n}\nexport { make, refreshColor, setColor }\n","import * as element from '../element'\n\nconst BASE_COLOR = [33, 41, 30, 15]\n\nconst NAME = 'WOOD'\n\nconst make = () => element.make({ type: NAME, color: BASE_COLOR })\n\nexport { NAME, make, BASE_COLOR }\n","import * as water from './water'\nimport { EMPTY, empty } from './empty'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [4, 2, 79, 90]\n\nconst NAME = 'SMOKE'\nconst despawnChance = 0.015\nconst chanceOfGoingStraight = 0.95\nconst chanceOfSpread = 0.5\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const above = sandpit.get(0, -1)\n\n  if (chance(despawnChance)) {\n    sandpit.set(0, 0, empty())\n  }\n\n  switch (above.type) {\n    case EMPTY:\n      if (chance(chanceOfGoingStraight)) {\n        sandpit.move(0, -1)\n      } else if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, -1)\n      }\n      break\n    case water.NAME:\n      sandpit.move(0, -1)\n      break\n  }\n\n  if (chance(chanceOfSpread) && sandpit.is(cell.direction, 0, EMPTY)) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as element from '../element'\nimport * as fire from './fire'\nimport * as water from './water'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [25, 59, 41, 48]\n\nconst NAME = 'OIL'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n\n  switch (below.type) {\n    case fire.NAME:\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, 1)\n      }\n      break\n    case water.NAME:\n      if (sandpit.is(cell.direction, -1, water.NAME)) {\n        sandpit.swap(cell.direction, -1)\n      }\n      break\n  }\n\n  if (sandpit.is(cell.direction, 0, EMPTY)) {\n    sandpit.move(cell.direction, 0)\n  } else if (chance(0.5) && sandpit.is(cell.direction, 0, water.NAME)) {\n    sandpit.swap(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n\n  if (chance(0.005)) {\n    element.refreshColor(cell)\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { empty, EMPTY } from './empty'\nimport * as water from './water'\nimport * as element from '../element'\nimport { chance, pickRand, randInt } from '../random'\n\nconst BASE_COLOR = [122, 73, 36, 30]\n\nconst NAME = 'PLANT'\n\nconst make = (energy, color = BASE_COLOR) => {\n  const isStem = chance(0.1)\n\n  return element.make({\n    type: NAME,\n    kind: isStem ? 'stem' : 'bud',\n    energy:\n      energy !== undefined ? energy : isStem ? randInt(10, 15) : randInt(1, 5),\n    direction: [pickRand([1, 0, -1]), -1],\n    color,\n  })\n}\n\nconst update = (sandpit, cell) => {\n  const [dx, dy] = cell.direction\n\n  if (sandpit.is(dx, dy, EMPTY)) {\n    if (chance(0.2) && cell.energy > 0) {\n      cell.energy--\n      sandpit.set(dx, dy, make(cell.energy))\n    }\n  }\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    if (chance(0.05) && sandpit.is(nx, ny, water.NAME)) {\n      sandpit.set(nx, ny, empty())\n      sandpit.set(dx, dy, make(cell.energy))\n    }\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY, empty } from './empty'\nimport * as wood from './wood'\nimport * as smoke from './smoke'\nimport * as oil from './oil'\nimport * as plant from './plant'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst NAME = 'FIRE'\nconst despawnChance = 0.2\nconst chanceOfGoingStraight = 0.73\nconst chanceOfSpread = 0.75\nconst ignitingChance = 1\nconst burningChance = 0.01\n\nconst extinguishChance = 0.01\nconst looseFlameChance = 0.06\n\nconst orange1 = [35, 76, 62, 72]\nconst orange2 = [35, 79, 67, 77]\nconst red1 = [7, 82, 56, 66]\nconst red2 = [7, 82, 49, 59]\nconst red3 = [7, 87, 33, 43]\n\nconst BASE_COLOR = orange1\n\nconst make = (phase = 'spark') =>\n  element.make({\n    type: NAME,\n    phase,\n    direction: pickRand([1, -1]),\n    color: pickRand([orange1, orange2, red1, red2, red3]),\n  })\n\nconst ignite = (sandpit) => {\n  let igniteTarget\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    if (\n      chance(ignitingChance) &&\n      (sandpit.is(nx, ny, wood.NAME) ||\n        sandpit.is(nx, ny, oil.NAME) ||\n        sandpit.is(nx, ny, plant.NAME))\n    ) {\n      igniteTarget = [nx, ny]\n      break\n    }\n  }\n\n  if (igniteTarget) {\n    sandpit.set(...igniteTarget, make('blaze'))\n    sandpit.set(0, 0, empty())\n  }\n}\n\nconst burn = (sandpit, spreadChance) => {\n  let burnTarget\n\n  for (let [nx, ny] of sandpit.neighbors2) {\n    if (\n      chance(spreadChance) &&\n      (sandpit.is(nx, ny, wood.NAME) ||\n        sandpit.is(nx, ny, oil.NAME) ||\n        sandpit.is(nx, ny, plant.NAME))\n    ) {\n      burnTarget = [nx, ny]\n      break\n    }\n  }\n  if (burnTarget) sandpit.set(...burnTarget, make('blaze'))\n}\n\nconst update = (sandpit, cell) => {\n  switch (cell.phase) {\n    case 'spark':\n      if (chance(despawnChance)) {\n        sandpit.set(0, 0, empty())\n      }\n\n      if (chance(chanceOfGoingStraight) && sandpit.is(0, -1, EMPTY)) {\n        sandpit.move(0, -1)\n      } else if (sandpit.is(cell.direction, -1, EMPTY)) {\n        sandpit.move(cell.direction, -1)\n      }\n\n      if (chance(chanceOfSpread) && sandpit.is(cell.direction, 0, EMPTY)) {\n        sandpit.move(cell.direction, 0)\n      } else {\n        cell.direction *= -1\n      }\n\n      ignite(sandpit)\n      break\n    case 'blaze':\n      burn(sandpit, burningChance)\n\n      if (chance(extinguishChance)) {\n        sandpit.set(0, 0, smoke.make())\n        return\n      } else if (sandpit.is(0, -1, EMPTY)) {\n        if (chance(looseFlameChance)) {\n          sandpit.set(0, -1, make())\n        } else if (chance(0.15)) {\n          sandpit.set(0, -1, smoke.make())\n        }\n      }\n\n      let noNeighbors = true\n\n      for (let [nx, ny] of sandpit.neighbors1) {\n        if (!sandpit.is(nx, ny, EMPTY)) {\n          noNeighbors = false\n          break\n        }\n      }\n      if (noNeighbors) {\n        sandpit.set(0, 0, empty())\n      }\n      break\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as element from '../element'\nimport * as fire from './fire'\nimport * as oil from './oil'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [216, 65, 60, 50]\n\nconst NAME = 'WATER'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    slimey: false,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n\n  switch (below.type) {\n    case fire.NAME:\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case oil.NAME:\n      sandpit.swap(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, 1)\n      }\n      break\n  }\n\n  if (\n    sandpit.is(cell.direction, 0, EMPTY) ||\n    sandpit.is(cell.direction, 0, fire.NAME)\n  ) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n\n  if (chance(0.005)) {\n    element.refreshColor(cell)\n  }\n\n  if (cell.slimey) {\n    element.setColor([163, 79, 79, 75], cell)\n    cell.slimey = false\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as water from './water'\nimport * as oil from './oil'\nimport * as element from '../element'\nimport { pickRand } from '../random'\n\nconst BASE_COLOR = [46, 78, 75, 50]\n\nconst NAME = 'SAND'\n\nconst make = () => element.make({ type: NAME, color: BASE_COLOR })\n\nconst update = (sandpit) => {\n  const below = sandpit.get(0, 1)\n  const direction = pickRand([1, -1])\n\n  switch (below.type) {\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case oil.NAME:\n    case water.NAME:\n      sandpit.swap(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(direction, 1, EMPTY)) {\n        sandpit.move(direction, 1)\n      }\n      break\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import * as element from '../element'\n\nconst BASE_COLOR = [0, 0, 60, 40]\n\nconst NAME = 'STONE'\n\nconst make = () => element.make({ type: NAME, color: BASE_COLOR })\n\nexport { NAME, make, BASE_COLOR }\n","import { EMPTY, empty } from './empty'\nimport * as water from './water'\nimport * as oil from './oil'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [130, 79, 84, 80]\n\nconst NAME = 'SLIME'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    drip: [],\n    direction: pickRand([1, -1]),\n    color: [130, 79, 84, 80],\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n  const direction = pickRand([1, -1])\n\n  let neighborCount = 0\n\n  for (let n of sandpit.neighbors1) {\n    const nbr = sandpit.get(...n)\n\n    if (nbr.type === water.NAME && chance(0.01)) {\n      nbr.slimey = true\n      sandpit.set(0, 0, empty())\n      return\n    }\n\n    if (nbr.type !== EMPTY) neighborCount++\n  }\n\n  const unstuck = chance((5 - neighborCount) / 5)\n\n  switch (below.type) {\n    case EMPTY:\n      if (unstuck) {\n        sandpit.move(0, 1)\n      }\n\n      break\n    case oil.NAME:\n      sandpit.swap(0, 1)\n      break\n    case water.NAME:\n      if (chance(0.05)) sandpit.set(0, 0, empty())\n      else sandpit.swap(0, 1)\n\n      break\n    case NAME:\n      if (unstuck && sandpit.is(direction, 1, EMPTY)) {\n        sandpit.move(direction, 1)\n      }\n      break\n  }\n\n  if (sandpit.is(cell.direction, 0, EMPTY)) {\n    if (unstuck) sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import * as sand from './sand'\nimport * as stone from './stone'\nimport * as empty from './empty'\nimport * as water from './water'\nimport * as smoke from './smoke'\nimport * as wood from './wood'\nimport * as fire from './fire'\nimport * as oil from './oil'\nimport * as plant from './plant'\nimport * as slime from './slime'\n\nexport const activeElements = {\n  [sand.NAME]: sand,\n  [water.NAME]: water,\n  [smoke.NAME]: smoke,\n  [fire.NAME]: fire,\n  [oil.NAME]: oil,\n  [plant.NAME]: plant,\n  [slime.NAME]: slime,\n}\n\nexport default {\n  sand,\n  stone,\n  empty,\n  water,\n  smoke,\n  wood,\n  fire,\n  oil,\n  plant,\n  slime,\n}\n","import { empty, EMPTY } from './elements/empty'\n\nimport { activeElements } from './elements'\n\nlet cells = []\nlet size = 0\nlet generation\nlet upperBound\nlet defaultUpperBound\nlet activeCells\n\nconst init = (newSize = 100) => {\n  generation = 1\n  defaultUpperBound = { x: 0, y: newSize }\n  upperBound = defaultUpperBound\n  size = newSize\n  cells = Array.from({ length: size * size }, () => empty())\n}\n\nconst get = (x, y) => {\n  if (x < 0 || y < 0 || x >= size || y >= size) return { type: 'BOUNDS' }\n\n  return cells[getIndex(x, y)]\n}\n\nconst set = (x, y, cell = empty()) => {\n  const index = getIndex(x, y)\n\n  cell.clock = generation + 1\n  cells[index] = cell\n\n  if (y < upperBound.y) upperBound = { x, y }\n}\n\nconst makeNeighbors = (range = 1) => {\n  return Array.from({ length: range }, (_, i) => {\n    const n = i + 1\n    return [\n      [n * -1, n * -1],\n      [n * -1, 0],\n      [n * -1, n * 1],\n      [0, n * -1],\n      [0, n * 1],\n      [n * 1, n * -1],\n      [n * 1, 0],\n      [n * 1, n * 1],\n    ]\n  }).flat()\n}\n\nconst neighbors1 = makeNeighbors(1)\nconst neighbors2 = makeNeighbors(2)\n\nconst createApi = (cx, cy) => {\n  const relativeGet = (dx, dy) => get(cx + dx, cy + dy)\n  const relativeSet = (dx, dy, cell) => set(cx + dx, cy + dy, cell)\n\n  const is = (dx, dy, type) => get(cx + dx, cy + dy).type === type\n\n  const move = (dx, dy) => {\n    const cell = get(cx, cy)\n\n    if (cell.clock > generation) return\n\n    set(cx + dx, cy + dy, cell)\n    set(cx, cy, empty())\n  }\n\n  const swap = (dx, dy) => {\n    const c0 = get(cx, cy)\n\n    if (c0.clock > generation) return\n\n    const x = cx + dx\n    const y = cy + dy\n    const c1 = get(x, y)\n\n    set(x, y, c0)\n    set(cx, cy, c1)\n  }\n\n  return {\n    is,\n    move,\n    swap,\n    set: relativeSet,\n    get: relativeGet,\n    neighbors1,\n    neighbors2,\n  }\n}\n\nconst self = createApi(0, 0)\n\nconst getIndex = (x, y) => x * size + y\n\nconst getCoords = (index) => {\n  const y = index % size\n  const x = (index - y) / size\n\n  return [x, y]\n}\n\nconst draw = (x, y, cell) => {\n  if (cell.type === EMPTY || self.is(x, y, EMPTY)) {\n    const index = getIndex(x, y)\n    cell.clock = generation\n    cells[index] = cell\n    if (y < upperBound.y) upperBound = { x, y }\n  }\n}\n\nconst update = () => {\n  activeCells = {}\n\n  for (let i = 0, l = cells.length; i < l; i++) {\n    const [x, y] = getCoords(i)\n    const cell = cells[i]\n\n    if (cell.type !== EMPTY) {\n      if (cell.color in activeCells) {\n        activeCells[cell.color].push({ x, y, cell })\n      } else {\n        activeCells[cell.color] = [{ x, y, cell }]\n      }\n    }\n\n    if (cell.type in activeElements) {\n      activeElements[cell.type].update(createApi(x, y), cell)\n    }\n  }\n  generation++\n}\n\nconst getUpperBound = () => upperBound.y\n\nconst refreshUpperBound = () => {\n  if (self.is(upperBound.x, upperBound.y, EMPTY)) {\n    upperBound = defaultUpperBound\n  }\n}\n\nconst getActive = () => activeCells\n\nexport { init, getUpperBound, refreshUpperBound, draw, update, getActive }\n","const width = 500\nconst height = 500\nconst cellSize = 5\nconst canvas = document.querySelector('canvas')\nconst ctx = canvas.getContext('2d', { alpha: false })\nconst dpr = window.devicePixelRatio || 1\nconst boundsOffset = 5\n\ncanvas.width = width * dpr\ncanvas.height = height * dpr\ncanvas.style.width = `${width}px`\ncanvas.style.height = `${height}px`\nctx.scale(dpr, dpr)\nctx.fillStyle = 'white'\nctx.fillRect(0, 0, width, height)\n\nconst draw = (world) => {\n  const boundingY = world.getUpperBound() * cellSize - boundsOffset\n\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, boundingY, width, height - boundingY)\n\n  if (window.DEBUG) {\n    ctx.fillStyle = 'red'\n    ctx.fillRect(0, boundingY, width, 1)\n  }\n\n  const activeCells = world.getActive()\n\n  for (let color in activeCells) {\n    ctx.fillStyle = color\n    const blocks = activeCells[color]\n\n    for (let { x, y } of blocks) {\n      ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize)\n    }\n  }\n\n  world.refreshUpperBound()\n}\n\nexport { draw, cellSize }\n","import * as sandpit from './sandpit'\nimport * as canvas from './canvas'\nimport elements from './elements'\n\nwindow.DEBUG = false\nconst MAX_FPS = 60\nlet now, elapsed, then, fpsInterval\n\nconst tick = () => {\n  sandpit.update()\n  canvas.draw(sandpit)\n}\n\nconst loop = () => {\n  requestAnimationFrame(loop)\n  now = Date.now()\n  elapsed = now - then\n\n  if (elapsed > fpsInterval) {\n    then = now - (elapsed % fpsInterval)\n    tick()\n  }\n}\n\nconst start = () => {\n  fpsInterval = 1000 / MAX_FPS\n  then = Date.now()\n\n  loop()\n}\n\nconst $canvas = document.querySelector('#canvas')\n\nlet drawing = false\n\nconst coord = (c) => Math.floor(c / canvas.cellSize)\n\nconst getCoords = (e) => {\n  const x = coord(e.x)\n  const y = coord(e.y)\n\n  return [\n    [x, y],\n    [x + 1, y],\n    [x - 1, y],\n    [x, y + 1],\n    [x, y - 1],\n  ]\n}\n\nconst handleDrawing = (e) => {\n  getCoords(e).forEach((coords) => sandpit.draw(...coords, useElement()))\n}\n\n$canvas.addEventListener('mousemove', (e) => {\n  if (drawing) handleDrawing(e)\n})\n$canvas.addEventListener('click', handleDrawing)\n$canvas.addEventListener('mousedown', () => {\n  drawing = true\n})\n$canvas.addEventListener('mouseup', () => {\n  drawing = false\n})\n\nlet selectedElement = elements.sand\nlet previousElementBtn\n\nconst elementsGrid = document.querySelector('.elements')\n\nObject.values(elements).forEach((element) => {\n  const btn = document.createElement('button')\n  const [h, s, l] = element.BASE_COLOR || []\n\n  if (element.NAME == elements.sand.NAME) {\n    previousElementBtn = btn\n    btn.classList.add('element-selected')\n  }\n  btn.textContent = element.NAME.toLowerCase()\n  btn.classList.add(element.NAME.toLowerCase() + '-btn')\n  btn.classList.add('element-btn')\n  btn.style.background = `hsl(${h}deg ${s}% ${l}%)`\n\n  btn.addEventListener('click', () => {\n    previousElementBtn.classList.remove('element-selected')\n    btn.classList.add('element-selected')\n    previousElementBtn = btn\n    return (selectedElement = element)\n  })\n\n  elementsGrid.appendChild(btn)\n})\n\nconst useElement = () => selectedElement.make()\n\nconst tickBtn = document.querySelector('#tick')\n\ntickBtn.classList.add('hidden')\n\ntickBtn.addEventListener('click', tick)\n\nif (window.DEBUG) {\n  tickBtn.classList.remove('hidden')\n}\n\nsandpit.init()\n\nif (!window.DEBUG) {\n  start()\n}\n"]}