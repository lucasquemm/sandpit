{"version":3,"sources":["elements/empty.js","random.js","element.js","elements/oil.js","elements/slime.js","elements/stone.js","elements/lava.js","elements/smoke.js","elements/fire.js","elements/water.js","elements/sand.js","elements/wood.js","elements/plant.js","elements/bug.js","elements/index.js","sandpit.js","canvas.js","main.js"],"names":["EMPTY","NAME","empty_","type","clock","empty","make","rand","max","min","Math","random","randInt","round","pickRand","values","length","chance","threshold","color","meta","colorInput","createColor","setColor","cell","refreshColor","BASE_COLOR","element","flammable","direction","update","sandpit","below","get","fire","move","is","water","swap","drip","neighborCount","neighbors1","n","nbr","slimey","set","unstuck","oil","nx","ny","stone","smoke","despawnChance","chanceOfGoingStraight","chanceOfSpread","above","lava","sand","slime","ignitingChance","burningChance","extinguishChance","looseFlameChance","orange1","orange2","red1","red2","red3","phase","ignite","igniteTarget","burn","spreadChance","burnTarget","neighbors2","noNeighbors","energy","isStem","kind","undefined","dx","dy","movementRate","species","jumpDirection","climbing","updateClimber","updateJumper","updateFlyer","plant","jumping","flyingDirection","fx","fy","x","y","activeElements","bug","wood","generation","upperBound","defaultUpperBound","cells","size","activeCells","BOUNDS","init","newSize","Array","from","getIndex","index","makeNeighbors","range","_","i","flat","createApi","cx","cy","c0","c1","coordsCache","self","getCoords","cache","draw","l","cellsForColor","push","getUpperBound","refreshUpperBound","getActive","getCirularNeighbors","r","center","xSym","ySym","width","height","cellSize","ctx","boundsOffset","canvas","document","createElement","getContext","alpha","dpr","window","devicePixelRatio","style","querySelector","prepend","scale","fillStyle","fillRect","world","boundingY","DEBUG","blocks","now","elapsed","then","fpsInterval","previousElementBtn","MAX_FPS","tick","loop","requestAnimationFrame","Date","start","selectedElement","elements","elementsGrid","Object","forEach","btn","h","s","classList","add","textContent","toLowerCase","background","addEventListener","remove","appendChild","previousSize","toolSizes","toolsGrid","selectedSize","tool","resetBtn","location","reload","tickBtn","$canvas","canvasBounds","getBoundingClientRect","drawing","coord","c","floor","e","handleDrawing","coords"],"mappings":"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","file":"main.521dbf34.js","sourceRoot":"../src","sourcesContent":["const EMPTY = 'EMPTY'\nconst NAME = EMPTY\nconst empty_ = { type: EMPTY, clock: 0 }\nconst empty = () => empty_\nconst make = empty\n\nexport { EMPTY, empty, make, NAME }\n","const rand = (max, min = 0) => Math.random() * (max - min) + min\nconst randInt = (...args) => Math.round(rand(...args))\nconst pickRand = (values) => values[randInt(values.length - 1, 0)]\nconst chance = (threshold) => Math.random() < threshold\n\nexport { rand, randInt, pickRand, chance }\n","import { randInt } from './random'\n\nconst make = ({ type, color, ...meta }) => ({\n  type,\n  clock: 0,\n  colorInput: color,\n  color: createColor(color),\n  ...meta,\n})\n\nconst createColor = (color) =>\n  `hsl(${color[0]}deg ${color[1]}% ${randInt(color[2], color[3])}%)`\n\nconst setColor = (color, cell) => {\n  cell.color = createColor(color)\n}\n\nconst refreshColor = (cell) => {\n  cell.color = createColor(cell.colorInput)\n}\n\nexport { make, refreshColor, setColor }\n","import { EMPTY } from './empty'\nimport * as element from '../element'\nimport * as fire from './fire'\nimport * as water from './water'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [25, 59, 31, 45]\n\nconst NAME = 'OIL'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    flammable: true,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n\n  switch (below.type) {\n    case fire.NAME:\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, 1)\n      }\n      break\n    case water.NAME:\n      if (sandpit.is(cell.direction, -1, water.NAME)) {\n        sandpit.swap(cell.direction, -1)\n      }\n      break\n  }\n\n  if (sandpit.is(cell.direction, 0, EMPTY)) {\n    sandpit.move(cell.direction, 0)\n  } else if (chance(0.5) && sandpit.is(cell.direction, 0, water.NAME)) {\n    sandpit.swap(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n\n  if (chance(0.005)) {\n    element.refreshColor(cell)\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY, empty } from './empty'\nimport * as water from './water'\nimport * as oil from './oil'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [130, 79, 84, 80]\n\nconst NAME = 'SLIME'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    drip: [],\n    direction: pickRand([1, -1]),\n    color: [130, 79, 84, 80],\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n  const direction = pickRand([1, -1])\n\n  let neighborCount = 0\n\n  for (let n of sandpit.neighbors1) {\n    const nbr = sandpit.get(...n)\n\n    if (nbr.type === water.NAME && chance(0.01)) {\n      nbr.slimey = true\n      sandpit.set(0, 0, empty())\n      return\n    }\n\n    if (nbr.type !== EMPTY) neighborCount++\n  }\n\n  const unstuck = chance((5 - neighborCount) / 5)\n\n  switch (below.type) {\n    case EMPTY:\n      if (unstuck) {\n        sandpit.move(0, 1)\n      }\n\n      break\n    case oil.NAME:\n      sandpit.swap(0, 1)\n      break\n    case water.NAME:\n      if (chance(0.05)) sandpit.set(0, 0, empty())\n      else sandpit.swap(0, 1)\n\n      break\n    case NAME:\n      if (unstuck && sandpit.is(direction, 1, EMPTY)) {\n        sandpit.move(direction, 1)\n      }\n      break\n  }\n\n  if (sandpit.is(cell.direction, 0, EMPTY)) {\n    if (unstuck) sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import * as element from '../element'\n\nconst BASE_COLOR = [0, 0, 60, 40]\n\nconst NAME = 'STONE'\n\nconst make = () => element.make({ type: NAME, color: BASE_COLOR })\n\nexport { NAME, make, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\nimport * as fire from './fire'\nimport * as water from './water'\nimport * as stone from './stone'\nimport * as smoke from './smoke'\n\nconst BASE_COLOR = [20, 64, 55, 45]\n\nconst NAME = 'LAVA'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n\n  switch (below.type) {\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, 1)\n      }\n      break\n  }\n\n  if (chance(0.5) && sandpit.is(cell.direction, 0, EMPTY)) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n\n  if (chance(0.005) && sandpit.is(0, -1, EMPTY)) {\n    sandpit.set(0, -1, fire.make())\n  }\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    const nbr = sandpit.get(nx, ny)\n\n    if (nbr.flammable) {\n      sandpit.set(nx, ny, fire.make('blaze'))\n    } else if (nbr.type === water.NAME) {\n      sandpit.set(0, 0, stone.make())\n      sandpit.set(nx, ny, smoke.make())\n    }\n  }\n\n  if (chance(0.005)) {\n    element.refreshColor(cell)\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import * as water from './water'\nimport * as slime from './slime'\nimport * as sand from './sand'\nimport * as oil from './oil'\nimport * as lava from './lava'\nimport { EMPTY, empty } from './empty'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [4, 2, 79, 90]\n\nconst NAME = 'SMOKE'\nconst despawnChance = 0.015\nconst chanceOfGoingStraight = 0.95\nconst chanceOfSpread = 0.5\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const above = sandpit.get(0, -1)\n\n  if (chance(despawnChance)) {\n    sandpit.set(0, 0, empty())\n  }\n\n  switch (above.type) {\n    case EMPTY:\n      if (chance(chanceOfGoingStraight)) {\n        sandpit.move(0, -1)\n      } else if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, -1)\n      }\n      break\n    case lava.NAME:\n    case oil.NAME:\n    case sand.NAME:\n    case slime.NAME:\n    case water.NAME:\n      sandpit.swap(0, -1)\n      break\n  }\n\n  if (chance(chanceOfSpread) && sandpit.is(cell.direction, 0, EMPTY)) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY, empty } from './empty'\nimport * as smoke from './smoke'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst NAME = 'FIRE'\nconst despawnChance = 0.2\nconst chanceOfGoingStraight = 0.73\nconst chanceOfSpread = 0.75\nconst ignitingChance = 1\nconst burningChance = 0.01\n\nconst extinguishChance = 0.01\nconst looseFlameChance = 0.06\n\nconst orange1 = [35, 76, 62, 72]\nconst orange2 = [35, 79, 67, 77]\nconst red1 = [7, 82, 56, 66]\nconst red2 = [7, 82, 49, 59]\nconst red3 = [7, 87, 33, 43]\n\nconst BASE_COLOR = orange1\n\nconst make = (phase = 'spark') =>\n  element.make({\n    type: NAME,\n    phase,\n    direction: pickRand([1, -1]),\n    color: pickRand([orange1, orange2, red1, red2, red3]),\n  })\n\nconst ignite = (sandpit) => {\n  let igniteTarget\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    if (chance(ignitingChance) && sandpit.get(nx, ny).flammable) {\n      igniteTarget = [nx, ny]\n      break\n    }\n  }\n\n  if (igniteTarget) {\n    sandpit.set(...igniteTarget, make('blaze'))\n    sandpit.set(0, 0, empty())\n  }\n}\n\nconst burn = (sandpit, spreadChance) => {\n  let burnTarget\n\n  for (let [nx, ny] of sandpit.neighbors2) {\n    if (chance(spreadChance) && sandpit.get(nx, ny).flammable) {\n      burnTarget = [nx, ny]\n      break\n    }\n  }\n  if (burnTarget) sandpit.set(...burnTarget, make('blaze'))\n}\n\nconst update = (sandpit, cell) => {\n  switch (cell.phase) {\n    case 'spark':\n      if (chance(despawnChance)) {\n        sandpit.set(0, 0, empty())\n      }\n\n      if (chance(chanceOfGoingStraight) && sandpit.is(0, -1, EMPTY)) {\n        sandpit.move(0, -1)\n      } else if (sandpit.is(cell.direction, -1, EMPTY)) {\n        sandpit.move(cell.direction, -1)\n      }\n\n      if (chance(chanceOfSpread) && sandpit.is(cell.direction, 0, EMPTY)) {\n        sandpit.move(cell.direction, 0)\n      } else {\n        cell.direction *= -1\n      }\n\n      ignite(sandpit)\n      break\n    case 'blaze':\n      burn(sandpit, burningChance)\n\n      if (chance(extinguishChance)) {\n        sandpit.set(0, 0, smoke.make())\n        return\n      } else if (sandpit.is(0, -1, EMPTY)) {\n        if (chance(looseFlameChance)) {\n          sandpit.set(0, -1, make())\n        } else if (chance(0.05)) {\n          sandpit.set(0, -1, smoke.make())\n        }\n      }\n\n      let noNeighbors = true\n\n      for (let [nx, ny] of sandpit.neighbors1) {\n        if (!sandpit.is(nx, ny, EMPTY)) {\n          noNeighbors = false\n          break\n        }\n      }\n      if (noNeighbors) {\n        sandpit.set(0, 0, empty())\n      }\n      break\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as element from '../element'\nimport * as fire from './fire'\nimport * as oil from './oil'\n\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [216, 65, 60, 50]\n\nconst NAME = 'WATER'\nconst make = () =>\n  element.make({\n    type: NAME,\n    slimey: false,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n\n  switch (below.type) {\n    case fire.NAME:\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case oil.NAME:\n      sandpit.swap(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, 1)\n      }\n      break\n  }\n\n  if (\n    sandpit.is(cell.direction, 0, EMPTY) ||\n    sandpit.is(cell.direction, 0, fire.NAME)\n  ) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n\n  if (chance(0.005)) {\n    element.refreshColor(cell)\n  }\n\n  if (cell.slimey) {\n    element.setColor([163, 79, 79, 75], cell)\n    cell.slimey = false\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as water from './water'\nimport * as oil from './oil'\nimport * as element from '../element'\nimport { pickRand } from '../random'\n\nconst BASE_COLOR = [46, 78, 75, 50]\n\nconst NAME = 'SAND'\n\nconst make = () => element.make({ type: NAME, color: BASE_COLOR })\n\nconst update = (sandpit) => {\n  const below = sandpit.get(0, 1)\n  const direction = pickRand([1, -1])\n\n  switch (below.type) {\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case oil.NAME:\n    case water.NAME:\n      sandpit.swap(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(direction, 1, EMPTY)) {\n        sandpit.move(direction, 1)\n      }\n      break\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import * as element from '../element'\n\nconst BASE_COLOR = [33, 41, 30, 15]\n\nconst NAME = 'WOOD'\n\nconst make = () =>\n  element.make({ type: NAME, flammable: true, color: BASE_COLOR })\n\nexport { NAME, make, BASE_COLOR }\n","import { empty, EMPTY } from './empty'\nimport * as water from './water'\nimport * as element from '../element'\nimport { chance, pickRand, randInt } from '../random'\n\nconst BASE_COLOR = [122, 73, 36, 25]\n\nconst NAME = 'PLANT'\n\nconst make = (energy, color = BASE_COLOR) => {\n  const isStem = chance(0.1)\n\n  return element.make({\n    type: NAME,\n    kind: isStem ? 'stem' : 'bud',\n    flammable: true,\n    energy:\n      energy !== undefined ? energy : isStem ? randInt(10, 15) : randInt(1, 5),\n    direction: [pickRand([1, 0, -1]), -1],\n    color,\n  })\n}\n\nconst update = (sandpit, cell) => {\n  const [dx, dy] = cell.direction\n  const above = sandpit.get(dx, dy)\n  const canGrow = above.type === EMPTY || above.type === water.NAME\n\n  if (canGrow) {\n    if (chance(0.2) && cell.energy > 0) {\n      cell.energy--\n      sandpit.set(dx, dy, make(cell.energy))\n    }\n  }\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    if (chance(0.05) && sandpit.is(nx, ny, water.NAME)) {\n      sandpit.set(nx, ny, empty())\n      sandpit.set(dx, dy, make(cell.energy))\n    }\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY, empty } from './empty'\nimport * as plant from './plant'\nimport * as water from './water'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [277, 59, 50, 20]\n\nconst NAME = 'BUG'\n\nconst movementRate = 0.02\n\nconst make = () => {\n  const [species, color] = pickRand([\n    ['climber', BASE_COLOR],\n    ['jumper', [277, 62, 66, 60]],\n    ['flyer', [277, 33, 36, 30]],\n  ])\n\n  return element.make({\n    type: NAME,\n    species,\n    flammable: true,\n    jumpDirection: 0,\n    climbing: false,\n    direction: pickRand([1, -1]),\n    color: color,\n  })\n}\n\nconst update = (sandpit, cell) => {\n  switch (cell.species) {\n    case 'climber':\n      updateClimber(sandpit, cell)\n      break\n    case 'jumper':\n      updateJumper(sandpit, cell)\n      break\n    case 'flyer':\n      updateFlyer(sandpit, cell)\n      break\n  }\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    if (chance(0.005) && sandpit.is(nx, ny, plant.NAME)) {\n      sandpit.set(nx, ny, empty())\n      break\n    }\n  }\n\n  if (chance(0.02) && sandpit.is(0, -1, water.NAME)) {\n    if (chance(0.05)) {\n      sandpit.set(0, 0, empty())\n    } else {\n      sandpit.swap(0, -1)\n    }\n  }\n}\n\nconst updateClimber = (sandpit, cell) => {\n  if (cell.climbing) {\n    if (chance(movementRate) && sandpit.is(0, cell.direction, EMPTY)) {\n      if (sandpit.is(cell.direction, cell.direction, EMPTY)) {\n        cell.climbing = false\n        sandpit.move(cell.direction, cell.direction)\n      } else {\n        sandpit.move(0, cell.direction)\n      }\n    } else {\n      cell.direction *= -1\n    }\n  } else {\n    const below = sandpit.get(0, 1)\n    const direction = pickRand([1, -1])\n\n    switch (below.type) {\n      case EMPTY:\n        sandpit.move(0, 1)\n        break\n      case NAME:\n        if (sandpit.is(direction, 1, EMPTY)) {\n          sandpit.move(direction, 1)\n        }\n        break\n    }\n\n    if (chance(movementRate)) {\n      if (sandpit.is(cell.direction, 0, EMPTY)) {\n        sandpit.move(cell.direction, 0)\n      } else if (chance(0.5) && sandpit.is(0, cell.direction, EMPTY)) {\n        cell.climbing = !cell.climbing\n        cell.direction = pickRand([1, -1])\n      } else {\n        cell.direction *= -1\n      }\n    }\n  }\n}\n\nconst updateJumper = (sandpit, cell) => {\n  if (cell.jumping) {\n    if (sandpit.is(cell.jumpDirection, -1, EMPTY)) {\n      sandpit.move(cell.jumpDirection, -1)\n    } else {\n      cell.jumping = false\n      cell.jumpDirection = pickRand([1, -1])\n    }\n\n    if (chance(0.1)) {\n      cell.jumping = false\n    }\n  } else {\n    const below = sandpit.get(cell.jumpDirection, 1)\n    const direction = pickRand([1, -1])\n\n    switch (below.type) {\n      case EMPTY:\n        sandpit.move(cell.jumpDirection, 1)\n        break\n      case NAME:\n        if (sandpit.is(direction, 1, EMPTY)) {\n          sandpit.move(direction, 1)\n        }\n        break\n      default:\n        cell.jumpDirection = 0\n\n        if (chance(0.05)) {\n          cell.jumping = true\n          cell.jumpDirection = pickRand([1, 0, -1])\n        }\n        break\n    }\n\n    if (chance(movementRate)) {\n      if (sandpit.is(cell.direction, 0, EMPTY)) {\n        sandpit.move(cell.direction, 0)\n      } else {\n        cell.direction *= -1\n      }\n    }\n  }\n}\n\nconst updateFlyer = (sandpit, cell) => {\n  if (!cell.flyingDirection || chance(0.05)) {\n    const x = pickRand([1, 0, -1])\n    const y = pickRand(x === 0 ? [1, -1] : [1, 0, -1])\n\n    cell.flyingDirection = [x, y]\n    return\n  }\n\n  const [fx, fy] = cell.flyingDirection\n\n  if (sandpit.is(fx, fy, EMPTY)) {\n    sandpit.move(fx, fy)\n  } else if (chance(0.005)) {\n    cell.flyingDirection[pickRand([0, 1])] *= -1\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import * as sand from './sand'\nimport * as stone from './stone'\nimport * as empty from './empty'\nimport * as water from './water'\nimport * as smoke from './smoke'\nimport * as wood from './wood'\nimport * as fire from './fire'\nimport * as oil from './oil'\nimport * as plant from './plant'\nimport * as slime from './slime'\nimport * as lava from './lava'\nimport * as bug from './bug'\n\nexport const activeElements = {\n  [sand.NAME]: sand,\n  [water.NAME]: water,\n  [smoke.NAME]: smoke,\n  [fire.NAME]: fire,\n  [oil.NAME]: oil,\n  [plant.NAME]: plant,\n  [slime.NAME]: slime,\n  [lava.NAME]: lava,\n  [bug.NAME]: bug,\n}\n\nexport default {\n  sand,\n  stone,\n  empty,\n  water,\n  smoke,\n  wood,\n  fire,\n  oil,\n  plant,\n  slime,\n  lava,\n  bug,\n}\n","import { empty, EMPTY } from './elements/empty'\n\nimport { activeElements } from './elements'\n\nlet cells = []\nlet size = 0\nlet generation\nlet upperBound\nlet defaultUpperBound\nlet activeCells = {}\nconst BOUNDS = { type: 'BOUNDS' }\n\nconst init = (newSize = 100) => {\n  generation = 1\n  defaultUpperBound = { x: 0, y: newSize }\n  upperBound = defaultUpperBound\n  size = newSize\n  cells = Array.from({ length: size * size }, () => empty())\n}\n\nconst get = (x, y) => {\n  if (x < 0 || y < 0 || x >= size || y >= size) return BOUNDS\n  return cells[getIndex(x, y)]\n}\n\nconst set = (x, y, cell = empty()) => {\n  const index = getIndex(x, y)\n\n  cell.clock = generation + 1\n  cells[index] = cell\n\n  if (y < upperBound.y) upperBound = { x, y }\n}\n\nconst makeNeighbors = (range = 1) => {\n  return Array.from({ length: range }, (_, i) => {\n    const n = i + 1\n    return [\n      [n * -1, n * -1],\n      [n * -1, 0],\n      [n * -1, n * 1],\n      [0, n * -1],\n      [0, n * 1],\n      [n * 1, n * -1],\n      [n * 1, 0],\n      [n * 1, n * 1],\n    ]\n  }).flat()\n}\n\nconst neighbors1 = makeNeighbors(1)\nconst neighbors2 = makeNeighbors(2)\n\nconst createApi = (cx, cy) => {\n  const relativeGet = (dx, dy) => get(cx + dx, cy + dy)\n  const relativeSet = (dx, dy, cell) => set(cx + dx, cy + dy, cell)\n\n  const is = (dx, dy, type) => get(cx + dx, cy + dy).type === type\n\n  const move = (dx, dy) => {\n    const cell = get(cx, cy)\n\n    if (cell.clock > generation) return\n\n    set(cx + dx, cy + dy, cell)\n    set(cx, cy, empty())\n  }\n\n  const swap = (dx, dy) => {\n    const c0 = get(cx, cy)\n\n    if (c0.clock > generation) return\n\n    const x = cx + dx\n    const y = cy + dy\n    const c1 = get(x, y)\n\n    set(x, y, c0)\n    set(cx, cy, c1)\n  }\n\n  return {\n    is,\n    move,\n    swap,\n    set: relativeSet,\n    get: relativeGet,\n    neighbors1,\n    neighbors2,\n  }\n}\n\nconst coordsCache = {}\n\nconst self = createApi(0, 0)\n\nconst getIndex = (x, y) => x * size + y\n\nconst getCoords = (index) => {\n  const cache = coordsCache[index]\n\n  if (cache !== undefined) return cache\n\n  const y = index % size\n  const x = (index - y) / size\n\n  return (coordsCache[index] = [x, y])\n}\n\nconst draw = (x, y, cell) => {\n  if (x < 0 || y < 0 || x >= size || y >= size) return\n  if (cell.type === EMPTY || self.is(x, y, EMPTY)) {\n    const index = getIndex(x, y)\n    cell.clock = generation\n    cells[index] = cell\n    if (y < upperBound.y) upperBound = { x, y }\n  }\n}\n\nconst update = () => {\n  activeCells = {}\n\n  for (let i = 0, l = cells.length; i < l; i++) {\n    const [x, y] = getCoords(i)\n    const cell = cells[i]\n\n    if (cell.type !== EMPTY) {\n      const cellsForColor = activeCells[cell.color]\n      if (cellsForColor !== undefined) {\n        cellsForColor.push({ x, y, cell })\n      } else {\n        activeCells[cell.color] = [{ x, y, cell }]\n      }\n    }\n\n    const element = activeElements[cell.type]\n\n    if (element !== undefined) {\n      element.update(createApi(x, y), cell)\n    }\n  }\n\n  generation++\n}\n\nconst getUpperBound = () => upperBound.y\n\nconst refreshUpperBound = () => {\n  if (self.is(upperBound.x, upperBound.y, EMPTY)) {\n    upperBound = defaultUpperBound\n  }\n}\n\nconst getActive = () => activeCells\n\nconst getCirularNeighbors = (r, center) => {\n  const [cx, cy] = center\n  const cells = []\n\n  for (let x = cx - r; x <= cx; x++) {\n    for (let y = cy - r; y <= cy; y++) {\n      if ((x - cx) * (x - cx) + (y - cy) * (y - cy) <= r * r) {\n        const xSym = cx - (x - cx)\n        const ySym = cy - (y - cy)\n\n        cells.push([x, y], [x, ySym], [xSym, y], [xSym, ySym])\n      }\n    }\n  }\n\n  return cells\n}\n\nexport {\n  init,\n  getUpperBound,\n  refreshUpperBound,\n  draw,\n  update,\n  getActive,\n  getCirularNeighbors,\n}\n","const width = 600\nconst height = 600\nconst cellSize = 5\nconst boundsOffset = 5\nlet ctx\n\nconst init = () => {\n  const canvas = document.createElement('canvas')\n\n  ctx = canvas.getContext('2d', { alpha: false })\n\n  const dpr = window.devicePixelRatio || 1\n\n  canvas.width = width * dpr\n  canvas.height = height * dpr\n  canvas.style.width = `${width}px`\n  canvas.style.height = `${height}px`\n  document.querySelector('#canvas-target').prepend(canvas)\n  ctx.scale(dpr, dpr)\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, 0, width, height)\n\n  return canvas\n}\n\nconst draw = (world) => {\n  const boundingY = world.getUpperBound() * cellSize - boundsOffset\n\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, boundingY, width, height - boundingY)\n\n  if (window.DEBUG) {\n    ctx.fillStyle = 'red'\n    ctx.fillRect(0, boundingY, width, 1)\n  }\n\n  const activeCells = world.getActive()\n\n  for (let color in activeCells) {\n    ctx.fillStyle = color\n    const blocks = activeCells[color]\n\n    let i = blocks.length\n\n    while (i--) {\n      const { x, y } = blocks[i]\n      ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize)\n    }\n  }\n}\n\nexport { init, draw, cellSize }\n","import * as sandpit from './sandpit'\nimport * as canvas from './canvas'\nimport elements from './elements'\n\nwindow.DEBUG = false\nconst MAX_FPS = 60\nlet now, elapsed, then, fpsInterval\n\nconst tick = () => {\n  sandpit.update()\n  canvas.draw(sandpit)\n}\n\nconst loop = () => {\n  requestAnimationFrame(loop)\n  now = Date.now()\n  elapsed = now - then\n\n  if (elapsed > fpsInterval) {\n    then = now - (elapsed % fpsInterval)\n    tick()\n  }\n}\n\nconst start = () => {\n  fpsInterval = 1000 / MAX_FPS\n  then = Date.now()\n  loop()\n}\n\nlet selectedElement = elements.sand\nlet previousElementBtn\n\nconst elementsGrid = document.querySelector('.elements')\n\nObject.values(elements).forEach((element) => {\n  const btn = document.createElement('button')\n  const [h, s, l] = element.BASE_COLOR || []\n\n  if (element.NAME === elements.sand.NAME) {\n    previousElementBtn = btn\n    btn.classList.add('element-selected')\n  }\n  btn.textContent = element.NAME.toLowerCase()\n  btn.classList.add(element.NAME.toLowerCase() + '-btn')\n  btn.classList.add('element-btn')\n  btn.style.background = `hsl(${h}deg ${s}% ${l}%)`\n\n  btn.addEventListener('click', () => {\n    previousElementBtn.classList.remove('element-selected')\n    btn.classList.add('element-selected')\n    previousElementBtn = btn\n    return (selectedElement = element)\n  })\n\n  elementsGrid.appendChild(btn)\n})\n\nconst toolSizes = [1, 4, 8, 12]\n\nconst toolsGrid = document.querySelector('.tools')\n\nlet selectedSize = 4\nlet previousSize\n\ntoolSizes.forEach((tool) => {\n  const btn = document.createElement('button')\n  btn.classList.add('tool-btn')\n\n  if (selectedSize === tool) {\n    previousSize = btn\n    btn.classList.add('tool-selected')\n  }\n\n  btn.textContent = tool\n\n  btn.addEventListener('click', () => {\n    previousSize.classList.remove('tool-selected')\n    btn.classList.add('tool-selected')\n    previousSize = btn\n    return (selectedSize = tool)\n  })\n\n  toolsGrid.appendChild(btn)\n})\n\nconst resetBtn = document.createElement('button')\n\nresetBtn.classList.add('tool-btn')\nresetBtn.classList.add('reset-btn')\n\nresetBtn.textContent = 'RESET'\n\nresetBtn.addEventListener('click', () => {\n  window.location.reload()\n})\n\ntoolsGrid.appendChild(resetBtn)\n\nconst tickBtn = document.querySelector('#tick')\n\ntickBtn.addEventListener('click', tick)\n\nif (!window.DEBUG) {\n  tickBtn.classList.add('hidden')\n}\n\nconst $canvas = canvas.init()\nconst canvasBounds = $canvas.getBoundingClientRect()\n\nlet drawing = false\n\nconst coord = (c) => Math.floor(c / canvas.cellSize)\n\nconst getCoords = (e) => {\n  const x = coord(e.x - canvasBounds.x)\n  const y = coord(e.y - canvasBounds.y)\n\n  return sandpit.getCirularNeighbors(selectedSize, [x, y])\n}\n\nconst handleDrawing = (e) => {\n  getCoords(e).forEach((coords) =>\n    sandpit.draw(...coords, selectedElement.make()),\n  )\n}\n\n$canvas.addEventListener('mousemove', (e) => {\n  if (drawing) handleDrawing(e)\n})\n$canvas.addEventListener('click', handleDrawing)\n$canvas.addEventListener('mousedown', () => {\n  drawing = true\n})\n$canvas.addEventListener('mouseup', () => {\n  drawing = false\n  sandpit.refreshUpperBound()\n})\n\nsandpit.init(120)\n\nif (!window.DEBUG) {\n  start()\n}\n"]}