{"version":3,"sources":["elements/empty.js","random.js","element.js","elements/oil.js","elements/slime.js","elements/stone.js","elements/lava.js","elements/gunpowder.js","elements/smoke.js","elements/fire.js","elements/water.js","elements/sand.js","elements/wood.js","elements/plant.js","elements/bug.js","elements/acid.js","elements/index.js","sandpit.js","canvas.js","main.js"],"names":["EMPTY","NAME","empty_","type","clock","empty","make","rand","max","min","Math","random","randInt","round","pickRand","values","length","chance","threshold","color","meta","colorInput","createColor","setColor","cell","refreshColor","BASE_COLOR","element","flammable","direction","update","sandpit","below","get","fire","move","is","water","swap","drip","neighborCount","neighbors1","n","nbr","slimey","set","unstuck","oil","nx","ny","stone","smoke","explosive","ratio","minRadius","maxRadius","despawnChance","chanceOfGoingStraight","chanceOfSpread","above","gunpowder","lava","sand","slime","ignitingChance","burningChance","extinguishChance","looseFlameChance","orange1","orange2","red1","red2","red3","phase","ignite","igniteTarget","burn","spreadChance","burnTarget","neighbors2","burningNbr","radius","getCircularNeighbors","absoluteGet","absoluteSet","noNeighbors","energy","isStem","kind","undefined","dx","dy","movementRate","species","jumpDirection","climbing","updateClimber","updateJumper","updateFlyer","plant","jumping","flyingDirection","fx","fy","x","y","corrodeChance","activeElements","bug","acid","wood","generation","upperBound","defaultUpperBound","cells","size","activeCells","BOUNDS","init","newSize","Array","from","getIndex","index","makeNeighbors","range","_","i","flat","r","center","cx","cy","xSym","ySym","push","createApi","c0","c1","coordsCache","self","getCoords","cache","draw","l","cellsForColor","getUpperBound","refreshUpperBound","getActive","width","height","cellSize","ctx","boundsOffset","canvas","document","createElement","getContext","alpha","dpr","window","devicePixelRatio","style","querySelector","prepend","scale","fillStyle","fillRect","world","boundingY","DEBUG","blocks","now","elapsed","then","fpsInterval","previousElementBtn","MAX_FPS","tick","loop","requestAnimationFrame","Date","start","selectedElement","elements","elementsGrid","Object","forEach","btn","h","s","classList","add","textContent","toLowerCase","background","addEventListener","remove","appendChild","previousSize","toolSizes","toolsGrid","selectedSize","tool","resetBtn","location","reload","tickBtn","$canvas","canvasBounds","getBoundingClientRect","drawing","coord","c","floor","e","handleDrawing","coords"],"mappings":"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","file":"main.11cdfe51.js","sourceRoot":"../src","sourcesContent":["const EMPTY = 'EMPTY'\nconst NAME = EMPTY\nconst empty_ = { type: EMPTY, clock: 0 }\nconst empty = () => empty_\nconst make = empty\n\nexport { EMPTY, empty, make, NAME }\n","const rand = (max, min = 0) => Math.random() * (max - min) + min\nconst randInt = (...args) => Math.round(rand(...args))\nconst pickRand = (values) => values[randInt(values.length - 1, 0)]\nconst chance = (threshold) => Math.random() < threshold\n\nexport { rand, randInt, pickRand, chance }\n","import { randInt } from './random'\n\nconst make = ({ type, color, ...meta }) => ({\n  type,\n  clock: 0,\n  colorInput: color,\n  color: createColor(color),\n  ...meta,\n})\n\nconst createColor = (color) =>\n  `hsl(${color[0]}deg ${color[1]}% ${randInt(color[2], color[3])}%)`\n\nconst setColor = (color, cell) => {\n  cell.color = createColor(color)\n}\n\nconst refreshColor = (cell) => {\n  cell.color = createColor(cell.colorInput)\n}\n\nexport { make, refreshColor, setColor }\n","import { EMPTY } from './empty'\nimport * as element from '../element'\nimport * as fire from './fire'\nimport * as water from './water'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [25, 59, 31, 45]\n\nconst NAME = 'OIL'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    flammable: true,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n\n  switch (below.type) {\n    case fire.NAME:\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, 1)\n      }\n      break\n    case water.NAME:\n      if (sandpit.is(cell.direction, -1, water.NAME)) {\n        sandpit.swap(cell.direction, -1)\n      }\n      break\n  }\n\n  if (sandpit.is(cell.direction, 0, EMPTY)) {\n    sandpit.move(cell.direction, 0)\n  } else if (chance(0.5) && sandpit.is(cell.direction, 0, water.NAME)) {\n    sandpit.swap(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n\n  if (chance(0.005)) {\n    element.refreshColor(cell)\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY, empty } from './empty'\nimport * as water from './water'\nimport * as oil from './oil'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [130, 79, 84, 80]\n\nconst NAME = 'SLIME'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    drip: [],\n    direction: pickRand([1, -1]),\n    color: [130, 79, 84, 80],\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n  const direction = pickRand([1, -1])\n\n  let neighborCount = 0\n\n  for (let n of sandpit.neighbors1) {\n    const nbr = sandpit.get(...n)\n\n    if (nbr.type === water.NAME && chance(0.01)) {\n      nbr.slimey = true\n      sandpit.set(0, 0, empty())\n      return\n    }\n\n    if (nbr.type !== EMPTY) neighborCount++\n  }\n\n  const unstuck = chance((5 - neighborCount) / 5)\n\n  switch (below.type) {\n    case EMPTY:\n      if (unstuck) {\n        sandpit.move(0, 1)\n      }\n\n      break\n    case oil.NAME:\n      sandpit.swap(0, 1)\n      break\n    case water.NAME:\n      if (chance(0.05)) sandpit.set(0, 0, empty())\n      else sandpit.swap(0, 1)\n\n      break\n    case NAME:\n      if (unstuck && sandpit.is(direction, 1, EMPTY)) {\n        sandpit.move(direction, 1)\n      }\n      break\n  }\n\n  if (sandpit.is(cell.direction, 0, EMPTY)) {\n    if (unstuck) sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import * as element from '../element'\n\nconst BASE_COLOR = [0, 0, 60, 40]\n\nconst NAME = 'STONE'\n\nconst make = () => element.make({ type: NAME, color: BASE_COLOR })\n\nexport { NAME, make, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\nimport * as fire from './fire'\nimport * as water from './water'\nimport * as stone from './stone'\nimport * as smoke from './smoke'\n\nconst BASE_COLOR = [20, 64, 55, 45]\n\nconst NAME = 'LAVA'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n\n  switch (below.type) {\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, 1)\n      }\n      break\n  }\n\n  if (chance(0.5) && sandpit.is(cell.direction, 0, EMPTY)) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n\n  if (chance(0.005) && sandpit.is(0, -1, EMPTY)) {\n    sandpit.set(0, -1, fire.make())\n  }\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    const nbr = sandpit.get(nx, ny)\n\n    if (nbr.flammable) {\n      sandpit.set(nx, ny, fire.make('blaze'))\n    } else if (nbr.type === water.NAME) {\n      sandpit.set(0, 0, stone.make())\n      sandpit.set(nx, ny, smoke.make())\n    }\n  }\n\n  if (chance(0.005)) {\n    element.refreshColor(cell)\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as water from './water'\nimport * as oil from './oil'\nimport * as element from '../element'\nimport { pickRand } from '../random'\n\nconst BASE_COLOR = [44, 0, 34, 25]\n\nconst NAME = 'GUNPOWDER'\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    flammable: true,\n    explosive: { ratio: 0.1, minRadius: 5, maxRadius: 10 },\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit) => {\n  const below = sandpit.get(0, 1)\n  const direction = pickRand([1, -1])\n\n  switch (below.type) {\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case oil.NAME:\n    case water.NAME:\n      sandpit.swap(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(direction, 1, EMPTY)) {\n        sandpit.move(direction, 1)\n      }\n      break\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import * as water from './water'\nimport * as slime from './slime'\nimport * as sand from './sand'\nimport * as oil from './oil'\nimport * as lava from './lava'\nimport * as gunpowder from './gunpowder'\nimport { EMPTY, empty } from './empty'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [4, 2, 79, 90]\n\nconst NAME = 'SMOKE'\nconst despawnChance = 0.015\nconst chanceOfGoingStraight = 0.95\nconst chanceOfSpread = 0.5\n\nconst make = () =>\n  element.make({\n    type: NAME,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const above = sandpit.get(0, -1)\n\n  if (chance(despawnChance)) {\n    sandpit.set(0, 0, empty())\n  }\n\n  switch (above.type) {\n    case EMPTY:\n      if (chance(chanceOfGoingStraight)) {\n        sandpit.move(0, -1)\n      } else if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, -1)\n      }\n      break\n    case gunpowder.NAME:\n    case lava.NAME:\n    case oil.NAME:\n    case sand.NAME:\n    case slime.NAME:\n    case water.NAME:\n      sandpit.swap(0, -1)\n      break\n  }\n\n  if (chance(chanceOfSpread) && sandpit.is(cell.direction, 0, EMPTY)) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY, empty } from './empty'\nimport * as smoke from './smoke'\nimport * as element from '../element'\nimport { chance, pickRand, randInt } from '../random'\n\nconst NAME = 'FIRE'\nconst despawnChance = 0.2\nconst chanceOfGoingStraight = 0.73\nconst chanceOfSpread = 0.75\nconst ignitingChance = 1\nconst burningChance = 0.01\n\nconst extinguishChance = 0.01\nconst looseFlameChance = 0.06\n\nconst orange1 = [35, 76, 62, 72]\nconst orange2 = [35, 79, 67, 77]\nconst red1 = [7, 82, 56, 66]\nconst red2 = [7, 82, 49, 59]\nconst red3 = [7, 87, 33, 43]\n\nconst BASE_COLOR = orange1\n\nconst make = (phase = 'spark') =>\n  element.make({\n    type: NAME,\n    phase,\n    direction: pickRand([1, -1]),\n    color: pickRand([orange1, orange2, red1, red2, red3]),\n  })\n\nconst ignite = (sandpit) => {\n  let igniteTarget\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    if (chance(ignitingChance) && sandpit.get(nx, ny).flammable) {\n      igniteTarget = [nx, ny]\n      break\n    }\n  }\n\n  if (igniteTarget) {\n    sandpit.set(...igniteTarget, make('blaze'))\n    sandpit.set(0, 0, empty())\n  }\n}\n\nconst burn = (sandpit, spreadChance) => {\n  let burnTarget\n\n  for (let [nx, ny] of sandpit.neighbors2) {\n    if (chance(spreadChance) && sandpit.get(nx, ny).flammable) {\n      burnTarget = [nx, ny]\n      break\n    }\n  }\n  if (burnTarget) {\n    const burningNbr = sandpit.get(...burnTarget)\n    if (burningNbr.explosive && chance(burningNbr.explosive.ratio)) {\n      const radius = randInt(\n        burningNbr.explosive.minRadius,\n        burningNbr.explosive.maxRadius,\n      )\n      for (let [nx, ny] of sandpit.getCircularNeighbors(\n        radius,\n        ...burnTarget,\n      )) {\n        if (sandpit.absoluteGet(nx, ny).type !== 'BOUNDS') {\n          sandpit.absoluteSet(\n            nx,\n            ny,\n            chance(0.5) ? make('spark') : smoke.make(),\n          )\n        }\n      }\n    } else {\n      sandpit.set(...burnTarget, make('blaze'))\n    }\n  }\n}\n\nconst update = (sandpit, cell) => {\n  switch (cell.phase) {\n    case 'spark':\n      if (chance(despawnChance)) {\n        sandpit.set(0, 0, empty())\n      }\n\n      if (chance(chanceOfGoingStraight) && sandpit.is(0, -1, EMPTY)) {\n        sandpit.move(0, -1)\n      } else if (sandpit.is(cell.direction, -1, EMPTY)) {\n        sandpit.move(cell.direction, -1)\n      }\n\n      if (chance(chanceOfSpread) && sandpit.is(cell.direction, 0, EMPTY)) {\n        sandpit.move(cell.direction, 0)\n      } else {\n        cell.direction *= -1\n      }\n\n      ignite(sandpit)\n      break\n    case 'blaze':\n      burn(sandpit, burningChance)\n\n      if (chance(extinguishChance)) {\n        sandpit.set(0, 0, smoke.make())\n        return\n      } else if (sandpit.is(0, -1, EMPTY)) {\n        if (chance(looseFlameChance)) {\n          sandpit.set(0, -1, make())\n        } else if (chance(0.05)) {\n          sandpit.set(0, -1, smoke.make())\n        }\n      }\n\n      let noNeighbors = true\n\n      for (let [nx, ny] of sandpit.neighbors1) {\n        if (!sandpit.is(nx, ny, EMPTY)) {\n          noNeighbors = false\n          break\n        }\n      }\n      if (noNeighbors) {\n        sandpit.set(0, 0, empty())\n      }\n      break\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as element from '../element'\nimport * as fire from './fire'\nimport * as oil from './oil'\n\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [216, 65, 60, 50]\n\nconst NAME = 'WATER'\nconst make = () =>\n  element.make({\n    type: NAME,\n    slimey: false,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n\n  switch (below.type) {\n    case fire.NAME:\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case oil.NAME:\n      sandpit.swap(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, 1)\n      }\n      break\n  }\n\n  if (\n    sandpit.is(cell.direction, 0, EMPTY) ||\n    sandpit.is(cell.direction, 0, fire.NAME)\n  ) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n\n  if (chance(0.005)) {\n    element.refreshColor(cell)\n  }\n\n  if (cell.slimey) {\n    element.setColor([163, 79, 79, 75], cell)\n    cell.slimey = false\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY } from './empty'\nimport * as water from './water'\nimport * as oil from './oil'\nimport * as element from '../element'\nimport { pickRand } from '../random'\n\nconst BASE_COLOR = [46, 78, 75, 50]\n\nconst NAME = 'SAND'\n\nconst make = () => element.make({ type: NAME, color: BASE_COLOR })\n\nconst update = (sandpit) => {\n  const below = sandpit.get(0, 1)\n  const direction = pickRand([1, -1])\n\n  switch (below.type) {\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case oil.NAME:\n    case water.NAME:\n      sandpit.swap(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(direction, 1, EMPTY)) {\n        sandpit.move(direction, 1)\n      }\n      break\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import * as element from '../element'\n\nconst BASE_COLOR = [33, 41, 30, 15]\n\nconst NAME = 'WOOD'\n\nconst make = () =>\n  element.make({ type: NAME, flammable: true, color: BASE_COLOR })\n\nexport { NAME, make, BASE_COLOR }\n","import { empty, EMPTY } from './empty'\nimport * as water from './water'\nimport * as element from '../element'\nimport { chance, pickRand, randInt } from '../random'\n\nconst BASE_COLOR = [122, 73, 36, 25]\n\nconst NAME = 'PLANT'\n\nconst make = (energy, color = BASE_COLOR) => {\n  const isStem = chance(0.1)\n\n  return element.make({\n    type: NAME,\n    kind: isStem ? 'stem' : 'bud',\n    flammable: true,\n    energy:\n      energy !== undefined ? energy : isStem ? randInt(10, 15) : randInt(1, 5),\n    direction: [pickRand([1, 0, -1]), -1],\n    color,\n  })\n}\n\nconst update = (sandpit, cell) => {\n  const [dx, dy] = cell.direction\n  const above = sandpit.get(dx, dy)\n  const canGrow = above.type === EMPTY || above.type === water.NAME\n\n  if (canGrow) {\n    if (chance(0.2) && cell.energy > 0) {\n      cell.energy--\n      sandpit.set(dx, dy, make(cell.energy))\n    }\n  }\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    if (chance(0.05) && sandpit.is(nx, ny, water.NAME)) {\n      sandpit.set(nx, ny, empty())\n      sandpit.set(dx, dy, make(cell.energy))\n    }\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import { EMPTY, empty } from './empty'\nimport * as plant from './plant'\nimport * as water from './water'\nimport * as element from '../element'\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [277, 59, 50, 20]\n\nconst NAME = 'BUG'\n\nconst movementRate = 0.02\n\nconst make = () => {\n  const [species, color] = pickRand([\n    ['climber', BASE_COLOR],\n    ['jumper', [277, 62, 66, 60]],\n    ['flyer', [277, 33, 36, 30]],\n  ])\n\n  return element.make({\n    type: NAME,\n    species,\n    flammable: true,\n    jumpDirection: 0,\n    climbing: false,\n    direction: pickRand([1, -1]),\n    color: color,\n  })\n}\n\nconst update = (sandpit, cell) => {\n  switch (cell.species) {\n    case 'climber':\n      updateClimber(sandpit, cell)\n      break\n    case 'jumper':\n      updateJumper(sandpit, cell)\n      break\n    case 'flyer':\n      updateFlyer(sandpit, cell)\n      break\n  }\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    if (chance(0.005) && sandpit.is(nx, ny, plant.NAME)) {\n      sandpit.set(nx, ny, empty())\n      break\n    }\n  }\n\n  if (chance(0.02) && sandpit.is(0, -1, water.NAME)) {\n    if (chance(0.05)) {\n      sandpit.set(0, 0, empty())\n    } else {\n      sandpit.swap(0, -1)\n    }\n  }\n}\n\nconst updateClimber = (sandpit, cell) => {\n  if (cell.climbing) {\n    if (chance(movementRate) && sandpit.is(0, cell.direction, EMPTY)) {\n      if (sandpit.is(cell.direction, cell.direction, EMPTY)) {\n        cell.climbing = false\n        sandpit.move(cell.direction, cell.direction)\n      } else {\n        sandpit.move(0, cell.direction)\n      }\n    } else {\n      cell.direction *= -1\n    }\n  } else {\n    const below = sandpit.get(0, 1)\n    const direction = pickRand([1, -1])\n\n    switch (below.type) {\n      case EMPTY:\n        sandpit.move(0, 1)\n        break\n      case NAME:\n        if (sandpit.is(direction, 1, EMPTY)) {\n          sandpit.move(direction, 1)\n        }\n        break\n    }\n\n    if (chance(movementRate)) {\n      if (sandpit.is(cell.direction, 0, EMPTY)) {\n        sandpit.move(cell.direction, 0)\n      } else if (chance(0.5) && sandpit.is(0, cell.direction, EMPTY)) {\n        cell.climbing = !cell.climbing\n        cell.direction = pickRand([1, -1])\n      } else {\n        cell.direction *= -1\n      }\n    }\n  }\n}\n\nconst updateJumper = (sandpit, cell) => {\n  if (cell.jumping) {\n    if (sandpit.is(cell.jumpDirection, -1, EMPTY)) {\n      sandpit.move(cell.jumpDirection, -1)\n    } else {\n      cell.jumping = false\n      cell.jumpDirection = pickRand([1, -1])\n    }\n\n    if (chance(0.1)) {\n      cell.jumping = false\n    }\n  } else {\n    const below = sandpit.get(cell.jumpDirection, 1)\n    const direction = pickRand([1, -1])\n\n    switch (below.type) {\n      case EMPTY:\n        sandpit.move(cell.jumpDirection, 1)\n        break\n      case NAME:\n        if (sandpit.is(direction, 1, EMPTY)) {\n          sandpit.move(direction, 1)\n        }\n        break\n      default:\n        cell.jumpDirection = 0\n\n        if (chance(0.05)) {\n          cell.jumping = true\n          cell.jumpDirection = pickRand([1, 0, -1])\n        }\n        break\n    }\n\n    if (chance(movementRate)) {\n      if (sandpit.is(cell.direction, 0, EMPTY)) {\n        sandpit.move(cell.direction, 0)\n      } else {\n        cell.direction *= -1\n      }\n    }\n  }\n}\n\nconst updateFlyer = (sandpit, cell) => {\n  if (!cell.flyingDirection || chance(0.05)) {\n    const x = pickRand([1, 0, -1])\n    const y = pickRand(x === 0 ? [1, -1] : [1, 0, -1])\n\n    cell.flyingDirection = [x, y]\n    return\n  }\n\n  const [fx, fy] = cell.flyingDirection\n\n  if (sandpit.is(fx, fy, EMPTY)) {\n    sandpit.move(fx, fy)\n  } else if (chance(0.005)) {\n    cell.flyingDirection[pickRand([0, 1])] *= -1\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import * as element from '../element'\n\nimport { EMPTY, empty } from './empty'\n\nimport { chance, pickRand } from '../random'\n\nconst BASE_COLOR = [82, 82, 56, 47]\n\nconst corrodeChance = 0.01\n\nconst NAME = 'ACID'\nconst make = () =>\n  element.make({\n    type: NAME,\n    direction: pickRand([1, -1]),\n    color: BASE_COLOR,\n  })\n\nconst update = (sandpit, cell) => {\n  const below = sandpit.get(0, 1)\n\n  switch (below.type) {\n    case EMPTY:\n      sandpit.move(0, 1)\n      break\n    case NAME:\n      if (sandpit.is(cell.direction, 1, EMPTY)) {\n        sandpit.move(cell.direction, 1)\n      }\n      break\n  }\n\n  for (let [nx, ny] of sandpit.neighbors1) {\n    const nbr = sandpit.get(nx, ny)\n    if (nbr.type !== 'BOUNDS' && nbr.type !== NAME && nbr.type != EMPTY) {\n      if (chance(corrodeChance)) {\n        sandpit.set(nx, ny, empty())\n        sandpit.set(0, 0, empty())\n      }\n    }\n  }\n\n  if (sandpit.is(cell.direction, 0, EMPTY)) {\n    sandpit.move(cell.direction, 0)\n  } else {\n    cell.direction *= -1\n  }\n\n  if (chance(0.005)) {\n    element.refreshColor(cell)\n  }\n}\n\nexport { NAME, make, update, BASE_COLOR }\n","import * as sand from './sand'\nimport * as stone from './stone'\nimport * as empty from './empty'\nimport * as water from './water'\nimport * as smoke from './smoke'\nimport * as wood from './wood'\nimport * as fire from './fire'\nimport * as oil from './oil'\nimport * as plant from './plant'\nimport * as slime from './slime'\nimport * as lava from './lava'\nimport * as bug from './bug'\nimport * as gunpowder from './gunpowder'\nimport * as acid from './acid'\n\nexport const activeElements = {\n  [sand.NAME]: sand,\n  [water.NAME]: water,\n  [smoke.NAME]: smoke,\n  [fire.NAME]: fire,\n  [oil.NAME]: oil,\n  [plant.NAME]: plant,\n  [slime.NAME]: slime,\n  [lava.NAME]: lava,\n  [bug.NAME]: bug,\n  [gunpowder.NAME]: gunpowder,\n  [acid.NAME]: acid,\n}\n\nexport default {\n  sand,\n  stone,\n  empty,\n  water,\n  smoke,\n  wood,\n  fire,\n  oil,\n  plant,\n  slime,\n  lava,\n  bug,\n  gunpowder,\n  acid,\n}\n","import { empty, EMPTY } from './elements/empty'\n\nimport { activeElements } from './elements'\n\nlet cells = []\nlet size = 0\nlet generation\nlet upperBound\nlet defaultUpperBound\nlet activeCells = {}\nconst BOUNDS = { type: 'BOUNDS' }\n\nconst init = (newSize = 100) => {\n  generation = 1\n  defaultUpperBound = { x: 0, y: newSize }\n  upperBound = defaultUpperBound\n  size = newSize\n  cells = Array.from({ length: size * size }, () => empty())\n}\n\nconst get = (x, y) => {\n  if (x < 0 || y < 0 || x >= size || y >= size) return BOUNDS\n  return cells[getIndex(x, y)]\n}\n\nconst set = (x, y, cell = empty()) => {\n  const index = getIndex(x, y)\n\n  cell.clock = generation + 1\n  cells[index] = cell\n\n  if (y < upperBound.y) upperBound = { x, y }\n}\n\nconst makeNeighbors = (range = 1) => {\n  return Array.from({ length: range }, (_, i) => {\n    const n = i + 1\n    return [\n      [n * -1, n * -1],\n      [n * -1, 0],\n      [n * -1, n * 1],\n      [0, n * -1],\n      [0, n * 1],\n      [n * 1, n * -1],\n      [n * 1, 0],\n      [n * 1, n * 1],\n    ]\n  }).flat()\n}\n\nconst getCircularNeighbors = (r, center) => {\n  const [cx, cy] = center\n  const cells = []\n\n  for (let x = cx - r; x <= cx; x++) {\n    for (let y = cy - r; y <= cy; y++) {\n      if ((x - cx) * (x - cx) + (y - cy) * (y - cy) <= r * r) {\n        const xSym = cx - (x - cx)\n        const ySym = cy - (y - cy)\n\n        cells.push([x, y], [x, ySym], [xSym, y], [xSym, ySym])\n      }\n    }\n  }\n\n  return cells\n}\n\nconst neighbors1 = makeNeighbors(1)\nconst neighbors2 = makeNeighbors(2)\n\nconst createApi = (cx, cy) => {\n  const relativeGet = (dx, dy) => get(cx + dx, cy + dy)\n  const relativeSet = (dx, dy, cell) => set(cx + dx, cy + dy, cell)\n  const relativeCircular = (r, dx, dy) =>\n    getCircularNeighbors(r, [cx + dx, cy + dy])\n\n  const is = (dx, dy, type) => get(cx + dx, cy + dy).type === type\n\n  const move = (dx, dy) => {\n    const cell = get(cx, cy)\n\n    if (cell.clock > generation) return\n\n    set(cx + dx, cy + dy, cell)\n    set(cx, cy, empty())\n  }\n\n  const swap = (dx, dy) => {\n    const c0 = get(cx, cy)\n\n    if (c0.clock > generation) return\n\n    const x = cx + dx\n    const y = cy + dy\n    const c1 = get(x, y)\n\n    set(x, y, c0)\n    set(cx, cy, c1)\n  }\n\n  return {\n    is,\n    move,\n    swap,\n    set: relativeSet,\n    absoluteSet: set,\n    get: relativeGet,\n    absoluteGet: get,\n    neighbors1,\n    neighbors2,\n    getCircularNeighbors: relativeCircular,\n  }\n}\n\nconst coordsCache = {}\n\nconst self = createApi(0, 0)\n\nconst getIndex = (x, y) => x * size + y\n\nconst getCoords = (index) => {\n  const cache = coordsCache[index]\n\n  if (cache !== undefined) return cache\n\n  const y = index % size\n  const x = (index - y) / size\n\n  return (coordsCache[index] = [x, y])\n}\n\nconst draw = (x, y, cell) => {\n  if (x < 0 || y < 0 || x >= size || y >= size) return\n  if (cell.type === EMPTY || self.is(x, y, EMPTY)) {\n    const index = getIndex(x, y)\n    cell.clock = generation\n    cells[index] = cell\n    if (y < upperBound.y) upperBound = { x, y }\n  }\n}\n\nconst update = () => {\n  activeCells = {}\n\n  for (let i = 0, l = cells.length; i < l; i++) {\n    const [x, y] = getCoords(i)\n    const cell = cells[i]\n\n    if (cell.type !== EMPTY) {\n      const cellsForColor = activeCells[cell.color]\n      if (cellsForColor !== undefined) {\n        cellsForColor.push({ x, y, cell })\n      } else {\n        activeCells[cell.color] = [{ x, y, cell }]\n      }\n    }\n\n    const element = activeElements[cell.type]\n\n    if (element !== undefined) {\n      element.update(createApi(x, y), cell)\n    }\n  }\n\n  generation++\n}\n\nconst getUpperBound = () => upperBound.y\n\nconst refreshUpperBound = () => {\n  if (self.is(upperBound.x, upperBound.y, EMPTY)) {\n    upperBound = defaultUpperBound\n  }\n}\n\nconst getActive = () => activeCells\n\nexport {\n  init,\n  getUpperBound,\n  refreshUpperBound,\n  draw,\n  update,\n  getActive,\n  getCircularNeighbors,\n}\n","const width = 600\nconst height = 600\nconst cellSize = 5\nconst boundsOffset = 5\nlet ctx\n\nconst init = () => {\n  const canvas = document.createElement('canvas')\n\n  ctx = canvas.getContext('2d', { alpha: false })\n\n  const dpr = window.devicePixelRatio || 1\n\n  canvas.width = width * dpr\n  canvas.height = height * dpr\n  canvas.style.width = `${width}px`\n  canvas.style.height = `${height}px`\n  document.querySelector('#canvas-target').prepend(canvas)\n  ctx.scale(dpr, dpr)\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, 0, width, height)\n\n  return canvas\n}\n\nconst draw = (world) => {\n  const boundingY = world.getUpperBound() * cellSize - boundsOffset\n\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, boundingY, width, height - boundingY)\n\n  if (window.DEBUG) {\n    ctx.fillStyle = 'red'\n    ctx.fillRect(0, boundingY, width, 1)\n  }\n\n  const activeCells = world.getActive()\n\n  for (let color in activeCells) {\n    ctx.fillStyle = color\n    const blocks = activeCells[color]\n\n    let i = blocks.length\n\n    while (i--) {\n      const { x, y } = blocks[i]\n      ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize)\n    }\n  }\n}\n\nexport { init, draw, cellSize }\n","import * as sandpit from './sandpit'\nimport * as canvas from './canvas'\nimport elements from './elements'\n\nwindow.DEBUG = false\nconst MAX_FPS = 60\nlet now, elapsed, then, fpsInterval\n\nconst tick = () => {\n  sandpit.update()\n  canvas.draw(sandpit)\n}\n\nconst loop = () => {\n  requestAnimationFrame(loop)\n  now = Date.now()\n  elapsed = now - then\n\n  if (elapsed > fpsInterval) {\n    then = now - (elapsed % fpsInterval)\n    tick()\n  }\n}\n\nconst start = () => {\n  fpsInterval = 1000 / MAX_FPS\n  then = Date.now()\n  loop()\n}\n\nlet selectedElement = elements.sand\nlet previousElementBtn\n\nconst elementsGrid = document.querySelector('.elements')\n\nObject.values(elements).forEach((element) => {\n  const btn = document.createElement('button')\n  const [h, s, l] = element.BASE_COLOR || []\n\n  if (element.NAME === elements.sand.NAME) {\n    previousElementBtn = btn\n    btn.classList.add('element-selected')\n  }\n  btn.textContent = element.NAME.toLowerCase()\n  btn.classList.add(element.NAME.toLowerCase() + '-btn')\n  btn.classList.add('element-btn')\n  btn.style.background = `hsl(${h}deg ${s}% ${l}%)`\n\n  btn.addEventListener('click', () => {\n    previousElementBtn.classList.remove('element-selected')\n    btn.classList.add('element-selected')\n    previousElementBtn = btn\n    return (selectedElement = element)\n  })\n\n  elementsGrid.appendChild(btn)\n})\n\nconst toolSizes = [1, 4, 8, 12]\n\nconst toolsGrid = document.querySelector('.tools')\n\nlet selectedSize = 4\nlet previousSize\n\ntoolSizes.forEach((tool) => {\n  const btn = document.createElement('button')\n  btn.classList.add('tool-btn')\n\n  if (selectedSize === tool) {\n    previousSize = btn\n    btn.classList.add('tool-selected')\n  }\n\n  btn.textContent = tool\n\n  btn.addEventListener('click', () => {\n    previousSize.classList.remove('tool-selected')\n    btn.classList.add('tool-selected')\n    previousSize = btn\n    return (selectedSize = tool)\n  })\n\n  toolsGrid.appendChild(btn)\n})\n\nconst resetBtn = document.createElement('button')\n\nresetBtn.classList.add('tool-btn')\nresetBtn.classList.add('reset-btn')\n\nresetBtn.textContent = 'RESET'\n\nresetBtn.addEventListener('click', () => {\n  window.location.reload()\n})\n\ntoolsGrid.appendChild(resetBtn)\n\nconst tickBtn = document.querySelector('#tick')\n\ntickBtn.addEventListener('click', tick)\n\nif (!window.DEBUG) {\n  tickBtn.classList.add('hidden')\n}\n\nconst $canvas = canvas.init()\nconst canvasBounds = $canvas.getBoundingClientRect()\n\nlet drawing = false\n\nconst coord = (c) => Math.floor(c / canvas.cellSize)\n\nconst getCoords = (e) => {\n  const x = coord(e.x - canvasBounds.x)\n  const y = coord(e.y - canvasBounds.y)\n\n  return sandpit.getCircularNeighbors(selectedSize, [x, y])\n}\n\nconst handleDrawing = (e) => {\n  getCoords(e).forEach((coords) =>\n    sandpit.draw(...coords, selectedElement.make()),\n  )\n}\n\n$canvas.addEventListener('mousemove', (e) => {\n  if (drawing) handleDrawing(e)\n})\n$canvas.addEventListener('click', handleDrawing)\n$canvas.addEventListener('mousedown', () => {\n  drawing = true\n})\n$canvas.addEventListener('mouseup', () => {\n  drawing = false\n  sandpit.refreshUpperBound()\n})\n\nsandpit.init(120)\n\nif (!window.DEBUG) {\n  start()\n}\n"]}